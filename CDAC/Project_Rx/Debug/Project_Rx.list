
Project_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005830  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a7c  08005a7c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a7c  08005a7c  00006a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a84  08005a84  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a84  08005a84  00006a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a88  08005a88  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005a8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000002a8  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc12  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f3  00000000  00000000  00016c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00018f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1f  00000000  00000000  0001a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220a3  00000000  00000000  0001ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012220  00000000  00000000  0003cdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d01c2  00000000  00000000  0004f012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f1d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c80  00000000  00000000  0011f218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00123e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059a8 	.word	0x080059a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080059a8 	.word	0x080059a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	f023 030f 	bic.w	r3, r3, #15
 8000586:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <lcd16x2_i2c_sendCommand+0x60>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <lcd16x2_i2c_sendCommand+0x64>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f107 0208 	add.w	r2, r7, #8
 80005be:	23c8      	movs	r3, #200	@ 0xc8
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2304      	movs	r3, #4
 80005c4:	f002 f972 	bl	80028ac <HAL_I2C_Master_Transmit>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000078 	.word	0x20000078
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f023 030f 	bic.w	r3, r3, #15
 80005ee:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <lcd16x2_i2c_sendData+0x60>)
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <lcd16x2_i2c_sendData+0x64>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	f107 0208 	add.w	r2, r7, #8
 8000626:	23c8      	movs	r3, #200	@ 0xc8
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2304      	movs	r3, #4
 800062c:	f002 f93e 	bl	80028ac <HAL_I2C_Master_Transmit>
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000078 	.word	0x20000078
 800063c:	2000007c 	.word	0x2000007c

08000640 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000648:	2032      	movs	r0, #50	@ 0x32
 800064a:	f000 ff67 	bl	800151c <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 800064e:	4a30      	ldr	r2, [pc, #192]	@ (8000710 <lcd16x2_i2c_init+0xd0>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000654:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <lcd16x2_i2c_init+0xd0>)
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800065c:	2205      	movs	r2, #5
 800065e:	214e      	movs	r1, #78	@ 0x4e
 8000660:	f002 fa22 	bl	8002aa8 <HAL_I2C_IsDeviceReady>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d010      	beq.n	800068c <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <lcd16x2_i2c_init+0xd0>)
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000672:	2205      	movs	r2, #5
 8000674:	217e      	movs	r1, #126	@ 0x7e
 8000676:	f002 fa17 	bl	8002aa8 <HAL_I2C_IsDeviceReady>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000680:	2300      	movs	r3, #0
 8000682:	e040      	b.n	8000706 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000684:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <lcd16x2_i2c_init+0xd4>)
 8000686:	227e      	movs	r2, #126	@ 0x7e
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e002      	b.n	8000692 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 800068c:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <lcd16x2_i2c_init+0xd4>)
 800068e:	224e      	movs	r2, #78	@ 0x4e
 8000690:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000692:	202d      	movs	r0, #45	@ 0x2d
 8000694:	f000 ff42 	bl	800151c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000698:	2030      	movs	r0, #48	@ 0x30
 800069a:	f7ff ff69 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 800069e:	2005      	movs	r0, #5
 80006a0:	f000 ff3c 	bl	800151c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006a4:	2030      	movs	r0, #48	@ 0x30
 80006a6:	f7ff ff63 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 ff36 	bl	800151c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006b0:	2030      	movs	r0, #48	@ 0x30
 80006b2:	f7ff ff5d 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006b6:	2008      	movs	r0, #8
 80006b8:	f000 ff30 	bl	800151c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80006bc:	2020      	movs	r0, #32
 80006be:	f7ff ff57 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006c2:	2008      	movs	r0, #8
 80006c4:	f000 ff2a 	bl	800151c <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80006c8:	2028      	movs	r0, #40	@ 0x28
 80006ca:	f7ff ff51 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 ff24 	bl	800151c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80006d4:	2008      	movs	r0, #8
 80006d6:	f7ff ff4b 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 ff1e 	bl	800151c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff ff45 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006e6:	2003      	movs	r0, #3
 80006e8:	f000 ff18 	bl	800151c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80006ec:	2006      	movs	r0, #6
 80006ee:	f7ff ff3f 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 ff12 	bl	800151c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 80006f8:	200c      	movs	r0, #12
 80006fa:	f7ff ff39 	bl	8000570 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006fe:	2003      	movs	r0, #3
 8000700:	f000 ff0c 	bl	800151c <HAL_Delay>

  return true;
 8000704:	2301      	movs	r3, #1
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000078 	.word	0x20000078
 8000714:	2000007c 	.word	0x2000007c

08000718 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d108      	bne.n	8000748 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff15 	bl	8000570 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000746:	e007      	b.n	8000758 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800074e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff0c 	bl	8000570 <lcd16x2_i2c_sendCommand>
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000760:	b40f      	push	{r0, r1, r2, r3}
 8000762:	b590      	push	{r4, r7, lr}
 8000764:	b089      	sub	sp, #36	@ 0x24
 8000766:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000768:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800076c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fc8c 	bl	8005094 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	77fb      	strb	r3, [r7, #31]
 8000780:	e00a      	b.n	8000798 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8000782:	7ffb      	ldrb	r3, [r7, #31]
 8000784:	3320      	adds	r3, #32
 8000786:	443b      	add	r3, r7
 8000788:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff23 	bl	80005d8 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000792:	7ffb      	ldrb	r3, [r7, #31]
 8000794:	3301      	adds	r3, #1
 8000796:	77fb      	strb	r3, [r7, #31]
 8000798:	7ffc      	ldrb	r4, [r7, #31]
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd16 	bl	80001d0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	429c      	cmp	r4, r3
 80007a8:	d202      	bcs.n	80007b0 <lcd16x2_i2c_printf+0x50>
 80007aa:	7ffb      	ldrb	r3, [r7, #31]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d9e8      	bls.n	8000782 <lcd16x2_i2c_printf+0x22>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3724      	adds	r7, #36	@ 0x24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007ba:	b004      	add	sp, #16
 80007bc:	4770      	bx	lr
	...

080007c0 <LedInit>:



#include "led.h"

void LedInit(uint32_t pin) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	// enable GPIOD clock -- RCC AHB1ENR[GPIO_CLKEN] = 1
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 80007c8:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <LedInit+0xb0>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007cc:	4a28      	ldr	r2, [pc, #160]	@ (8000870 <LedInit+0xb0>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	6313      	str	r3, [r2, #48]	@ 0x30
	// config GPIOD.pin as output -- MODER[2*pin+1:2*pin] - 01
	GPIO_LED->MODER &= ~BV(pin*2+1);
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <LedInit+0xb4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	3201      	adds	r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <LedInit+0xb4>)
 80007ea:	400b      	ands	r3, r1
 80007ec:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin*2);
 80007ee:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <LedInit+0xb4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	0052      	lsls	r2, r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000874 <LedInit+0xb4>)
 8000800:	430b      	orrs	r3, r1
 8000802:	6013      	str	r3, [r2, #0]
	// config GPIOD.pin as pushpull -- OTYPER[pin] - 0
	GPIO_LED->OTYPER &= ~BV(pin);
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <LedInit+0xb4>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2101      	movs	r1, #1
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	43d2      	mvns	r2, r2
 8000812:	4611      	mov	r1, r2
 8000814:	4a17      	ldr	r2, [pc, #92]	@ (8000874 <LedInit+0xb4>)
 8000816:	400b      	ands	r3, r1
 8000818:	6053      	str	r3, [r2, #4]
	// config GPIOD.pin as low-speed -- OSPEEDR[2*pin+1:2*pin] - 00
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin*2));
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <LedInit+0xb4>)
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	0052      	lsls	r2, r2, #1
 8000822:	3201      	adds	r2, #1
 8000824:	2101      	movs	r1, #1
 8000826:	4091      	lsls	r1, r2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	430a      	orrs	r2, r1
 8000834:	43d2      	mvns	r2, r2
 8000836:	4611      	mov	r1, r2
 8000838:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <LedInit+0xb4>)
 800083a:	400b      	ands	r3, r1
 800083c:	6093      	str	r3, [r2, #8]
	// config GPIOD.pin with no pullup & pulldown resistor PUPDR[2*pin+1:2*pin] -- 00
	GPIO_LED->PUPDR &= ~(BV(pin*2+1) | BV(pin*2));
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <LedInit+0xb4>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	0052      	lsls	r2, r2, #1
 8000846:	3201      	adds	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	4091      	lsls	r1, r2
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	2001      	movs	r0, #1
 8000852:	fa00 f202 	lsl.w	r2, r0, r2
 8000856:	430a      	orrs	r2, r1
 8000858:	43d2      	mvns	r2, r2
 800085a:	4611      	mov	r1, r2
 800085c:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <LedInit+0xb4>)
 800085e:	400b      	ands	r3, r1
 8000860:	60d3      	str	r3, [r2, #12]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40020400 	.word	0x40020400

08000878 <LedOn>:

void LedOn(uint32_t pin) {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 1
	GPIO_LED->ODR |= BV(pin);
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <LedOn+0x28>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	2101      	movs	r1, #1
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a04      	ldr	r2, [pc, #16]	@ (80008a0 <LedOn+0x28>)
 8000890:	430b      	orrs	r3, r1
 8000892:	6153      	str	r3, [r2, #20]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	40020400 	.word	0x40020400

080008a4 <LedOff>:

void LedOff(uint32_t pin) {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 0
	GPIO_LED->ODR &= ~BV(pin);
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <LedOff+0x2c>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	2101      	movs	r1, #1
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	fa01 f202 	lsl.w	r2, r1, r2
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	4611      	mov	r1, r2
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <LedOff+0x2c>)
 80008be:	400b      	ands	r3, r1
 80008c0:	6153      	str	r3, [r2, #20]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40020400 	.word	0x40020400

080008d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80008de:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480b      	ldr	r0, [pc, #44]	@ (8000910 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80008e4:	f001 f85e 	bl	80019a4 <HAL_CAN_GetRxMessage>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80008ee:	f000 fb8d 	bl	800100c <Error_Handler>
	}
	if(RxHeader.DLC == 4)
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d102      	bne.n	8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
	{
		datacheck = 1;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
	}
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001a8 	.word	0x200001a8
 800090c:	2000018c 	.word	0x2000018c
 8000910:	20000080 	.word	0x20000080
 8000914:	200001ac 	.word	0x200001ac

08000918 <Normal_GreenLED>:

void Normal_GreenLED(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	LedOn(LED_GREEN_PIN);
 800091c:	200f      	movs	r0, #15
 800091e:	f7ff ffab 	bl	8000878 <LedOn>
	LedOff(LED_YELLOW_PIN);
 8000922:	200c      	movs	r0, #12
 8000924:	f7ff ffbe 	bl	80008a4 <LedOff>
	LedOff(LED_RED_PIN);
 8000928:	200d      	movs	r0, #13
 800092a:	f7ff ffbb 	bl	80008a4 <LedOff>
	LedOff(BUZZER);
 800092e:	200e      	movs	r0, #14
 8000930:	f7ff ffb8 	bl	80008a4 <LedOff>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <Goslow_YelloLED>:

void Goslow_YelloLED(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	LedOff(LED_GREEN_PIN);
 800093c:	200f      	movs	r0, #15
 800093e:	f7ff ffb1 	bl	80008a4 <LedOff>
	LedOn(LED_YELLOW_PIN);
 8000942:	200c      	movs	r0, #12
 8000944:	f7ff ff98 	bl	8000878 <LedOn>
	LedOff(LED_RED_PIN);
 8000948:	200d      	movs	r0, #13
 800094a:	f7ff ffab 	bl	80008a4 <LedOff>
	LedOff(BUZZER);
 800094e:	200e      	movs	r0, #14
 8000950:	f7ff ffa8 	bl	80008a4 <LedOff>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <Alert_RedLED>:

void Alert_RedLED(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	LedOff(LED_GREEN_PIN);
 800095c:	200f      	movs	r0, #15
 800095e:	f7ff ffa1 	bl	80008a4 <LedOff>
	LedOff(LED_YELLOW_PIN);
 8000962:	200c      	movs	r0, #12
 8000964:	f7ff ff9e 	bl	80008a4 <LedOff>
	LedOn(LED_RED_PIN);
 8000968:	200d      	movs	r0, #13
 800096a:	f7ff ff85 	bl	8000878 <LedOn>
	LedOff(BUZZER);
 800096e:	200e      	movs	r0, #14
 8000970:	f7ff ff98 	bl	80008a4 <LedOff>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <Accident_Alarm>:

void Accident_Alarm(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	LedOff(LED_GREEN_PIN);
 800097c:	200f      	movs	r0, #15
 800097e:	f7ff ff91 	bl	80008a4 <LedOff>
	LedOff(LED_YELLOW_PIN);
 8000982:	200c      	movs	r0, #12
 8000984:	f7ff ff8e 	bl	80008a4 <LedOff>
	LedOn(LED_RED_PIN);
 8000988:	200d      	movs	r0, #13
 800098a:	f7ff ff75 	bl	8000878 <LedOn>
	LedOn(BUZZER);
 800098e:	200e      	movs	r0, #14
 8000990:	f7ff ff72 	bl	8000878 <LedOn>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b09a      	sub	sp, #104	@ 0x68
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char str[80];
	char *str3 = "Normal Mode";
 800099e:	4b77      	ldr	r3, [pc, #476]	@ (8000b7c <main+0x1e4>)
 80009a0:	667b      	str	r3, [r7, #100]	@ 0x64
	char *str4 = "Vehicle Ahead";
 80009a2:	4b77      	ldr	r3, [pc, #476]	@ (8000b80 <main+0x1e8>)
 80009a4:	663b      	str	r3, [r7, #96]	@ 0x60
	char *str5 = "Go Slow";
 80009a6:	4b77      	ldr	r3, [pc, #476]	@ (8000b84 <main+0x1ec>)
 80009a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char *str6 = "Stop";
 80009aa:	4b77      	ldr	r3, [pc, #476]	@ (8000b88 <main+0x1f0>)
 80009ac:	65bb      	str	r3, [r7, #88]	@ 0x58
	char *str7 = "Accident Happened";
 80009ae:	4b77      	ldr	r3, [pc, #476]	@ (8000b8c <main+0x1f4>)
 80009b0:	657b      	str	r3, [r7, #84]	@ 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fd41 	bl	8001438 <HAL_Init>

  /* USER CODE BEGIN Init */

  LedInit(LED_GREEN_PIN);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f7ff ff02 	bl	80007c0 <LedInit>
  LedInit(LED_YELLOW_PIN);
 80009bc:	200c      	movs	r0, #12
 80009be:	f7ff feff 	bl	80007c0 <LedInit>
  LedInit(LED_RED_PIN);
 80009c2:	200d      	movs	r0, #13
 80009c4:	f7ff fefc 	bl	80007c0 <LedInit>
  LedInit(BUZZER);
 80009c8:	200e      	movs	r0, #14
 80009ca:	f7ff fef9 	bl	80007c0 <LedInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f8f5 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f000 faad 	bl	8000f30 <MX_GPIO_Init>
  MX_CAN1_Init();
 80009d6:	f000 f95b 	bl	8000c90 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80009da:	f000 fa7f 	bl	8000edc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009de:	f000 f9dd 	bl	8000d9c <MX_TIM1_Init>
  MX_I2C1_Init();
 80009e2:	f000 f9ad 	bl	8000d40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Transmit(&huart2, (uint8_t *)"Welcome \r \n", strlen("Welcome \r \n"), HAL_MAX_DELAY);
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ea:	220b      	movs	r2, #11
 80009ec:	4968      	ldr	r1, [pc, #416]	@ (8000b90 <main+0x1f8>)
 80009ee:	4869      	ldr	r0, [pc, #420]	@ (8000b94 <main+0x1fc>)
 80009f0:	f003 ffb0 	bl	8004954 <HAL_UART_Transmit>

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80009f4:	4868      	ldr	r0, [pc, #416]	@ (8000b98 <main+0x200>)
 80009f6:	f000 ff91 	bl	800191c <HAL_CAN_Start>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <main+0x6c>
  {
	  Error_Handler();
 8000a00:	f000 fb04 	bl	800100c <Error_Handler>
  }

  //Enable CAN Message reception interrupt
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a04:	2102      	movs	r1, #2
 8000a06:	4864      	ldr	r0, [pc, #400]	@ (8000b98 <main+0x200>)
 8000a08:	f001 f8ee 	bl	8001be8 <HAL_CAN_ActivateNotification>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4863      	ldr	r0, [pc, #396]	@ (8000b9c <main+0x204>)
 8000a10:	f003 f914 	bl	8003c3c <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(datacheck)
 8000a14:	4b62      	ldr	r3, [pc, #392]	@ (8000ba0 <main+0x208>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0fb      	beq.n	8000a14 <main+0x7c>
	  {
		  //Extract received ultrasonic data from CAN Message
		  distance = (RxData[0] << 8) | RxData[1];
 8000a1c:	4b61      	ldr	r3, [pc, #388]	@ (8000ba4 <main+0x20c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	4b5f      	ldr	r3, [pc, #380]	@ (8000ba4 <main+0x20c>)
 8000a26:	785b      	ldrb	r3, [r3, #1]
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4b5d      	ldr	r3, [pc, #372]	@ (8000ba8 <main+0x210>)
 8000a32:	801a      	strh	r2, [r3, #0]
		  //Extract received piezoelectric sensor data from CAN Message
		  flag = RxData[2];
 8000a34:	4b5b      	ldr	r3, [pc, #364]	@ (8000ba4 <main+0x20c>)
 8000a36:	789a      	ldrb	r2, [r3, #2]
 8000a38:	4b5c      	ldr	r3, [pc, #368]	@ (8000bac <main+0x214>)
 8000a3a:	701a      	strb	r2, [r3, #0]

		  sprintf(str, "Distance = %d cms   Flag = %d \r \n", distance, flag);
 8000a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ba8 <main+0x210>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b5a      	ldr	r3, [pc, #360]	@ (8000bac <main+0x214>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4638      	mov	r0, r7
 8000a48:	4959      	ldr	r1, [pc, #356]	@ (8000bb0 <main+0x218>)
 8000a4a:	f004 faed 	bl	8005028 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fbbd 	bl	80001d0 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4639      	mov	r1, r7
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a60:	484c      	ldr	r0, [pc, #304]	@ (8000b94 <main+0x1fc>)
 8000a62:	f003 ff77 	bl	8004954 <HAL_UART_Transmit>

		  //Reset datacheck flag
		  datacheck = 0;
 8000a66:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba0 <main+0x208>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]

		  int ret = lcd16x2_i2c_init(&hi2c1);
 8000a6c:	4851      	ldr	r0, [pc, #324]	@ (8000bb4 <main+0x21c>)
 8000a6e:	f7ff fde7 	bl	8000640 <lcd16x2_i2c_init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	653b      	str	r3, [r7, #80]	@ 0x50

		  if(distance > 80)
 8000a76:	4b4c      	ldr	r3, [pc, #304]	@ (8000ba8 <main+0x210>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	2b50      	cmp	r3, #80	@ 0x50
 8000a7c:	d910      	bls.n	8000aa0 <main+0x108>
		  	  {
		  		  Normal_GreenLED();
 8000a7e:	f7ff ff4b 	bl	8000918 <Normal_GreenLED>
		  		  if(ret)
 8000a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <main+0xfe>
		  		  {
		  		  	  lcd16x2_i2c_setCursor(0, 0);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fe44 	bl	8000718 <lcd16x2_i2c_setCursor>
		  		  	  lcd16x2_i2c_printf(str3);
 8000a90:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000a92:	f7ff fe65 	bl	8000760 <lcd16x2_i2c_printf>
		  		  }
		  		  htim1.Instance->CCR1 = 89;
 8000a96:	4b41      	ldr	r3, [pc, #260]	@ (8000b9c <main+0x204>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2259      	movs	r2, #89	@ 0x59
 8000a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a9e:	e7b9      	b.n	8000a14 <main+0x7c>
		  	  }
		  	  else if(distance < 80 && distance > 40)
 8000aa0:	4b41      	ldr	r3, [pc, #260]	@ (8000ba8 <main+0x210>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	2b4f      	cmp	r3, #79	@ 0x4f
 8000aa6:	d82b      	bhi.n	8000b00 <main+0x168>
 8000aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ba8 <main+0x210>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	2b28      	cmp	r3, #40	@ 0x28
 8000aae:	d927      	bls.n	8000b00 <main+0x168>
		  	  {
		  		  Goslow_YelloLED();
 8000ab0:	f7ff ff42 	bl	8000938 <Goslow_YelloLED>
		  		  if(ret)
 8000ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00d      	beq.n	8000ad6 <main+0x13e>
		  		  {
		  		  	  lcd16x2_i2c_setCursor(0, 0);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fe2b 	bl	8000718 <lcd16x2_i2c_setCursor>
		  		  	  lcd16x2_i2c_printf(str4);
 8000ac2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000ac4:	f7ff fe4c 	bl	8000760 <lcd16x2_i2c_printf>
		  		  	  lcd16x2_i2c_setCursor(1, 0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fe24 	bl	8000718 <lcd16x2_i2c_setCursor>
		  		  	  lcd16x2_i2c_printf(str5);
 8000ad0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000ad2:	f7ff fe45 	bl	8000760 <lcd16x2_i2c_printf>
		  		  }
		  		  htim1.Instance->CCR1 = 74;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	@ (8000b9c <main+0x204>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	224a      	movs	r2, #74	@ 0x4a
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
		  		  HAL_Delay(2000);
 8000ade:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ae2:	f000 fd1b 	bl	800151c <HAL_Delay>
		  		  htim1.Instance->CCR1 = 49;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <main+0x204>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2231      	movs	r2, #49	@ 0x31
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
		  		  HAL_Delay(2000);
 8000aee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000af2:	f000 fd13 	bl	800151c <HAL_Delay>
		  		  htim1.Instance->CCR1 = 39;
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <main+0x204>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2227      	movs	r2, #39	@ 0x27
 8000afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000afe:	e03b      	b.n	8000b78 <main+0x1e0>
		  	  }
		  	  else if(distance < 40 && distance > 15)
 8000b00:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <main+0x210>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2b27      	cmp	r3, #39	@ 0x27
 8000b06:	d814      	bhi.n	8000b32 <main+0x19a>
 8000b08:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <main+0x210>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d910      	bls.n	8000b32 <main+0x19a>
		  	  {
		  		  Alert_RedLED();
 8000b10:	f7ff ff22 	bl	8000958 <Alert_RedLED>
		  		  if(ret)
 8000b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d006      	beq.n	8000b28 <main+0x190>
		  		  {
		  		  	  lcd16x2_i2c_setCursor(0, 0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fdfb 	bl	8000718 <lcd16x2_i2c_setCursor>
		  		  	  lcd16x2_i2c_printf(str6);
 8000b22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000b24:	f7ff fe1c 	bl	8000760 <lcd16x2_i2c_printf>
		  		  }
		  		  htim1.Instance->CCR1 = 29;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <main+0x204>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	221d      	movs	r2, #29
 8000b2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b30:	e022      	b.n	8000b78 <main+0x1e0>
		  	  }
		  	  else if(flag == 1 && distance < 15)
 8000b32:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <main+0x214>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	f47f af6c 	bne.w	8000a14 <main+0x7c>
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <main+0x210>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	2b0e      	cmp	r3, #14
 8000b42:	f63f af67 	bhi.w	8000a14 <main+0x7c>
		  	  {
		  		  Accident_Alarm();
 8000b46:	f7ff ff17 	bl	8000978 <Accident_Alarm>
		  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b50:	4819      	ldr	r0, [pc, #100]	@ (8000bb8 <main+0x220>)
 8000b52:	f001 fd4d 	bl	80025f0 <HAL_GPIO_WritePin>
		  		  if(ret)
 8000b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <main+0x1d2>
		  		  {
		  		  	  lcd16x2_i2c_setCursor(0, 0);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fdda 	bl	8000718 <lcd16x2_i2c_setCursor>
		  		  	  lcd16x2_i2c_printf(str7);
 8000b64:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000b66:	f7ff fdfb 	bl	8000760 <lcd16x2_i2c_printf>
		  		  }
		  		  flag = 0;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <main+0x214>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
		  		  htim1.Instance->CCR1 = 0;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <main+0x204>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	635a      	str	r2, [r3, #52]	@ 0x34
	  if(datacheck)
 8000b78:	e74c      	b.n	8000a14 <main+0x7c>
 8000b7a:	bf00      	nop
 8000b7c:	080059c0 	.word	0x080059c0
 8000b80:	080059cc 	.word	0x080059cc
 8000b84:	080059dc 	.word	0x080059dc
 8000b88:	080059e4 	.word	0x080059e4
 8000b8c:	080059ec 	.word	0x080059ec
 8000b90:	08005a00 	.word	0x08005a00
 8000b94:	20000144 	.word	0x20000144
 8000b98:	20000080 	.word	0x20000080
 8000b9c:	200000fc 	.word	0x200000fc
 8000ba0:	200001ac 	.word	0x200001ac
 8000ba4:	200001a8 	.word	0x200001a8
 8000ba8:	200001b0 	.word	0x200001b0
 8000bac:	200001b2 	.word	0x200001b2
 8000bb0:	08005a0c 	.word	0x08005a0c
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	40020c00 	.word	0x40020c00

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	@ 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	2230      	movs	r2, #48	@ 0x30
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 fa6c 	bl	80050a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a27      	ldr	r2, [pc, #156]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf0:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	4b22      	ldr	r3, [pc, #136]	@ (8000c8c <SystemClock_Config+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a21      	ldr	r2, [pc, #132]	@ (8000c8c <SystemClock_Config+0xd0>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <SystemClock_Config+0xd0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c30:	2348      	movs	r3, #72	@ 0x48
 8000c32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fabb 	bl	80031bc <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c4c:	f000 f9de 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f002 fd1c 	bl	80036ac <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c7a:	f000 f9c7 	bl	800100c <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3750      	adds	r7, #80	@ 0x50
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000c98:	4a28      	ldr	r2, [pc, #160]	@ (8000d3c <MX_CAN1_Init+0xac>)
 8000c9a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000c9c:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000c9e:	2212      	movs	r2, #18
 8000ca0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ca2:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000cb0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cb4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cb6:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ce0:	4815      	ldr	r0, [pc, #84]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000ce2:	f000 fc3f 	bl	8001564 <HAL_CAN_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cec:	f000 f98e 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x1500;
 8000cfc:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8000d00:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0xFF00;
 8000d06:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000d0a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 8000d18:	230e      	movs	r3, #14
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <MX_CAN1_Init+0xa8>)
 8000d22:	f000 fd1b 	bl	800175c <HAL_CAN_ConfigFilter>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_CAN1_Init+0xa0>
  {
	  Error_Handler();
 8000d2c:	f000 f96e 	bl	800100c <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000080 	.word	0x20000080
 8000d3c:	40006400 	.word	0x40006400

08000d40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d46:	4a13      	ldr	r2, [pc, #76]	@ (8000d94 <MX_I2C1_Init+0x54>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d4c:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <MX_I2C1_Init+0x58>)
 8000d4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_I2C1_Init+0x50>)
 8000d7e:	f001 fc51 	bl	8002624 <HAL_I2C_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d88:	f000 f940 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000a8 	.word	0x200000a8
 8000d94:	40005400 	.word	0x40005400
 8000d98:	000186a0 	.word	0x000186a0

08000d9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b096      	sub	sp, #88	@ 0x58
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 f967 	bl	80050a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dda:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000ddc:	4a3e      	ldr	r2, [pc, #248]	@ (8000ed8 <MX_TIM1_Init+0x13c>)
 8000dde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8000de0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000de2:	2248      	movs	r2, #72	@ 0x48
 8000de4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000dec:	4b39      	ldr	r3, [pc, #228]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000dee:	2263      	movs	r2, #99	@ 0x63
 8000df0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df8:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dfe:	4b35      	ldr	r3, [pc, #212]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000e00:	2280      	movs	r2, #128	@ 0x80
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e04:	4833      	ldr	r0, [pc, #204]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000e06:	f002 fe71 	bl	8003aec <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e10:	f000 f8fc 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482c      	ldr	r0, [pc, #176]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000e22:	f003 f895 	bl	8003f50 <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e2c:	f000 f8ee 	bl	800100c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e30:	4828      	ldr	r0, [pc, #160]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000e32:	f002 feaa 	bl	8003b8a <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e3c:	f000 f8e6 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4821      	ldr	r0, [pc, #132]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000e50:	f003 fc62 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e5a:	f000 f8d7 	bl	800100c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5e:	2360      	movs	r3, #96	@ 0x60
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4814      	ldr	r0, [pc, #80]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000e84:	f002 ffa2 	bl	8003dcc <HAL_TIM_PWM_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e8e:	f000 f8bd 	bl	800100c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000eb6:	f003 fcab 	bl	8004810 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ec0:	f000 f8a4 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <MX_TIM1_Init+0x138>)
 8000ec6:	f000 f989 	bl	80011dc <HAL_TIM_MspPostInit>

}
 8000eca:	bf00      	nop
 8000ecc:	3758      	adds	r7, #88	@ 0x58
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000fc 	.word	0x200000fc
 8000ed8:	40010000 	.word	0x40010000

08000edc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_USART2_UART_Init+0x50>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000eec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_USART2_UART_Init+0x4c>)
 8000f14:	f003 fcce 	bl	80048b4 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f1e:	f000 f875 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000144 	.word	0x20000144
 8000f2c:	40004400 	.word	0x40004400

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_GPIO_Init+0xd4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fd8:	480b      	ldr	r0, [pc, #44]	@ (8001008 <MX_GPIO_Init+0xd8>)
 8000fda:	f001 fb09 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4804      	ldr	r0, [pc, #16]	@ (8001008 <MX_GPIO_Init+0xd8>)
 8000ff8:	f001 f95e 	bl	80022b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	@ 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40020c00 	.word	0x40020c00

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <HAL_MspInit+0x4c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001056:	2007      	movs	r0, #7
 8001058:	f001 f8ec 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1d      	ldr	r2, [pc, #116]	@ (80010fc <HAL_CAN_MspInit+0x94>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d134      	bne.n	80010f4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <HAL_CAN_MspInit+0x98>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	4a1b      	ldr	r2, [pc, #108]	@ (8001100 <HAL_CAN_MspInit+0x98>)
 8001094:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001098:	6413      	str	r3, [r2, #64]	@ 0x40
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <HAL_CAN_MspInit+0x98>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_CAN_MspInit+0x98>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <HAL_CAN_MspInit+0x98>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_CAN_MspInit+0x98>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010d4:	2309      	movs	r3, #9
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4809      	ldr	r0, [pc, #36]	@ (8001104 <HAL_CAN_MspInit+0x9c>)
 80010e0:	f001 f8ea 	bl	80022b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2014      	movs	r0, #20
 80010ea:	f001 f8ae 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010ee:	2014      	movs	r0, #20
 80010f0:	f001 f8c7 	bl	8002282 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	@ 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40006400 	.word	0x40006400
 8001100:	40023800 	.word	0x40023800
 8001104:	40020400 	.word	0x40020400

08001108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	@ (800118c <HAL_I2C_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12b      	bne.n	8001182 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_I2C_MspInit+0x88>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <HAL_I2C_MspInit+0x88>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_I2C_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001146:	23c0      	movs	r3, #192	@ 0xc0
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001156:	2304      	movs	r3, #4
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <HAL_I2C_MspInit+0x8c>)
 8001162:	f001 f8a9 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <HAL_I2C_MspInit+0x88>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	4a08      	ldr	r2, [pc, #32]	@ (8001190 <HAL_I2C_MspInit+0x88>)
 8001170:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001174:	6413      	str	r3, [r2, #64]	@ 0x40
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_I2C_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	@ 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40005400 	.word	0x40005400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <HAL_TIM_Base_MspInit+0x3c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10d      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_TIM_Base_MspInit+0x40>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a09      	ldr	r2, [pc, #36]	@ (80011d8 <HAL_TIM_Base_MspInit+0x40>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <HAL_TIM_Base_MspInit+0x40>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <HAL_TIM_MspPostInit+0x68>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d11e      	bne.n	800123c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_TIM_MspPostInit+0x6c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <HAL_TIM_MspPostInit+0x6c>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_TIM_MspPostInit+0x6c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800121a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800121e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800122c:	2301      	movs	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <HAL_TIM_MspPostInit+0x70>)
 8001238:	f001 f83e 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010000 	.word	0x40010000
 8001248:	40023800 	.word	0x40023800
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <HAL_UART_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 800127c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012aa:	230c      	movs	r3, #12
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ba:	2307      	movs	r3, #7
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <HAL_UART_MspInit+0x8c>)
 80012c6:	f000 fff7 	bl	80022b8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	@ 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004400 	.word	0x40004400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f8d1 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <CAN1_RX0_IRQHandler+0x10>)
 8001346:	f000 fc75 	bl	8001c34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000080 	.word	0x20000080

08001354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135c:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <_sbrk+0x5c>)
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <_sbrk+0x60>)
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001368:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <_sbrk+0x64>)
 8001372:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <_sbrk+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001384:	f003 fe98 	bl	80050b8 <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001392:	e009      	b.n	80013a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139a:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <_sbrk+0x64>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20020000 	.word	0x20020000
 80013b4:	00000400 	.word	0x00000400
 80013b8:	200001b4 	.word	0x200001b4
 80013bc:	20000308 	.word	0x20000308

080013c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <SystemInit+0x20>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <SystemInit+0x20>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800141c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013e8:	f7ff ffea 	bl	80013c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ee:	490d      	ldr	r1, [pc, #52]	@ (8001424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001404:	4c0a      	ldr	r4, [pc, #40]	@ (8001430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001412:	f003 fe57 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fabf 	bl	8000998 <main>
  bx  lr    
 800141a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800141c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001428:	08005a8c 	.word	0x08005a8c
  ldr r2, =_sbss
 800142c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001430:	20000304 	.word	0x20000304

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <HAL_Init+0x40>)
 8001442:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <HAL_Init+0x40>)
 800144e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a07      	ldr	r2, [pc, #28]	@ (8001478 <HAL_Init+0x40>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 fee7 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f808 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f7ff fdd4 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_InitTick+0x54>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_InitTick+0x58>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 feff 	bl	800229e <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b8:	f000 fec7 	bl	800224a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	@ (80014d8 <HAL_InitTick+0x5c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	200001b8 	.word	0x200001b8

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	@ (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200001b8 	.word	0x200001b8

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffde 	bl	8001504 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0ed      	b.n	8001752 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fd70 	bl	8001068 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001598:	f7ff ffb4 	bl	8001504 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800159e:	e012      	b.n	80015c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a0:	f7ff ffb0 	bl	8001504 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d90b      	bls.n	80015c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0c5      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0e5      	beq.n	80015a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0202 	bic.w	r2, r2, #2
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e4:	f7ff ff8e 	bl	8001504 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ea:	e012      	b.n	8001612 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ec:	f7ff ff8a 	bl	8001504 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d90b      	bls.n	8001612 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2205      	movs	r2, #5
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e09f      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e5      	bne.n	80015ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7e5b      	ldrb	r3, [r3, #25]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e007      	b.n	8001674 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e9b      	ldrb	r3, [r3, #26]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0220 	bic.w	r2, r2, #32
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7edb      	ldrb	r3, [r3, #27]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0210 	bic.w	r2, r2, #16
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0210 	orr.w	r2, r2, #16
 80016c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7f1b      	ldrb	r3, [r3, #28]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0208 	orr.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7f5b      	ldrb	r3, [r3, #29]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0204 	orr.w	r2, r2, #4
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	ea42 0103 	orr.w	r1, r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001774:	7cfb      	ldrb	r3, [r7, #19]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d003      	beq.n	8001782 <HAL_CAN_ConfigFilter+0x26>
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	2b02      	cmp	r3, #2
 800177e:	f040 80be 	bne.w	80018fe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001782:	4b65      	ldr	r3, [pc, #404]	@ (8001918 <HAL_CAN_ConfigFilter+0x1bc>)
 8001784:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800179c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	431a      	orrs	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	2201      	movs	r2, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	401a      	ands	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d123      	bne.n	800182c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001806:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3248      	adds	r2, #72	@ 0x48
 800180c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001820:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	3348      	adds	r3, #72	@ 0x48
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d122      	bne.n	800187a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	431a      	orrs	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001854:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3248      	adds	r2, #72	@ 0x48
 800185a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800186e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	3348      	adds	r3, #72	@ 0x48
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	401a      	ands	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001894:	e007      	b.n	80018a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	431a      	orrs	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	401a      	ands	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018c0:	e007      	b.n	80018d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018f0:	f023 0201 	bic.w	r2, r3, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e006      	b.n	800190c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40006400 	.word	0x40006400

0800191c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d12e      	bne.n	800198e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001948:	f7ff fddc 	bl	8001504 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800194e:	e012      	b.n	8001976 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001950:	f7ff fdd8 	bl	8001504 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b0a      	cmp	r3, #10
 800195c:	d90b      	bls.n	8001976 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e012      	b.n	800199c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e5      	bne.n	8001950 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e006      	b.n	800199c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
  }
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d003      	beq.n	80019c8 <HAL_CAN_GetRxMessage+0x24>
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	f040 8103 	bne.w	8001bce <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10e      	bne.n	80019ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d116      	bne.n	8001a0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0f7      	b.n	8001bdc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0e8      	b.n	8001bdc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	331b      	adds	r3, #27
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	4413      	add	r3, r2
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0204 	and.w	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10c      	bne.n	8001a42 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	331b      	adds	r3, #27
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	0d5b      	lsrs	r3, r3, #21
 8001a38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e00b      	b.n	8001a5a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	331b      	adds	r3, #27
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4413      	add	r3, r2
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	331b      	adds	r3, #27
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	4413      	add	r3, r2
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0202 	and.w	r2, r3, #2
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	331b      	adds	r3, #27
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	331b      	adds	r3, #27
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 020f 	and.w	r2, r3, #15
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	331b      	adds	r3, #27
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	331b      	adds	r3, #27
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	0a1a      	lsrs	r2, r3, #8
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0c1a      	lsrs	r2, r3, #16
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0e1a      	lsrs	r2, r3, #24
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	3303      	adds	r3, #3
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0a1a      	lsrs	r2, r3, #8
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	3305      	adds	r3, #5
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	0c1a      	lsrs	r2, r3, #16
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	3306      	adds	r3, #6
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0e1a      	lsrs	r2, r3, #24
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	3307      	adds	r3, #7
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	e007      	b.n	8001bca <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0220 	orr.w	r2, r2, #32
 8001bc8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e006      	b.n	8001bdc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
  }
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d002      	beq.n	8001c06 <HAL_CAN_ActivateNotification+0x1e>
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d109      	bne.n	8001c1a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6959      	ldr	r1, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e006      	b.n	8001c28 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d07c      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d023      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f983 	bl	8001fa2 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c9c:	e016      	b.n	8001ccc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb0:	e00c      	b.n	8001ccc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d004      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc4:	e002      	b.n	8001ccc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f989 	bl	8001fde <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d024      	beq.n	8001d20 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f963 	bl	8001fb6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cf0:	e016      	b.n	8001d20 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d04:	e00c      	b.n	8001d20 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d18:	e002      	b.n	8001d20 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f969 	bl	8001ff2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d024      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f943 	bl	8001fca <HAL_CAN_TxMailbox2CompleteCallback>
 8001d44:	e016      	b.n	8001d74 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d58:	e00c      	b.n	8001d74 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6c:	e002      	b.n	8001d74 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f949 	bl	8002006 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00c      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2210      	movs	r2, #16
 8001d96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2208      	movs	r2, #8
 8001db2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f930 	bl	800201a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fd7e 	bl	80008d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2208      	movs	r2, #8
 8001e16:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f912 	bl	8002042 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8f9 	bl	800202e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2210      	movs	r2, #16
 8001e56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8fc 	bl	8002056 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00b      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2208      	movs	r2, #8
 8001e78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8f5 	bl	800206a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d07b      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d072      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d043      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d03e      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f02:	2b60      	cmp	r3, #96	@ 0x60
 8001f04:	d02b      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x32a>
 8001f06:	2b60      	cmp	r3, #96	@ 0x60
 8001f08:	d82e      	bhi.n	8001f68 <HAL_CAN_IRQHandler+0x334>
 8001f0a:	2b50      	cmp	r3, #80	@ 0x50
 8001f0c:	d022      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x320>
 8001f0e:	2b50      	cmp	r3, #80	@ 0x50
 8001f10:	d82a      	bhi.n	8001f68 <HAL_CAN_IRQHandler+0x334>
 8001f12:	2b40      	cmp	r3, #64	@ 0x40
 8001f14:	d019      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x316>
 8001f16:	2b40      	cmp	r3, #64	@ 0x40
 8001f18:	d826      	bhi.n	8001f68 <HAL_CAN_IRQHandler+0x334>
 8001f1a:	2b30      	cmp	r3, #48	@ 0x30
 8001f1c:	d010      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x30c>
 8001f1e:	2b30      	cmp	r3, #48	@ 0x30
 8001f20:	d822      	bhi.n	8001f68 <HAL_CAN_IRQHandler+0x334>
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d002      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x2f8>
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d005      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f2a:	e01d      	b.n	8001f68 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f34:	e019      	b.n	8001f6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	f043 0310 	orr.w	r3, r3, #16
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3e:	e014      	b.n	8001f6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	f043 0320 	orr.w	r3, r3, #32
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f48:	e00f      	b.n	8001f6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f52:	e00a      	b.n	8001f6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f5c:	e005      	b.n	8001f6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f66:	e000      	b.n	8001f6a <HAL_CAN_IRQHandler+0x336>
            break;
 8001f68:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f78:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f872 	bl	800207e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	@ 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	@ (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	@ (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	@ (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	@ 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	@ 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff29 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff3e 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff8e 	bl	8002188 <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff31 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa2 	bl	80021f0 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	@ 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e16b      	b.n	80025ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 815a 	bne.w	80025a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d005      	beq.n	800230a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002306:	2b02      	cmp	r3, #2
 8002308:	d130      	bne.n	800236c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 0201 	and.w	r2, r3, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b03      	cmp	r3, #3
 8002376:	d017      	beq.n	80023a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80b4 	beq.w	80025a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b60      	ldr	r3, [pc, #384]	@ (80025c4 <HAL_GPIO_Init+0x30c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	4a5f      	ldr	r2, [pc, #380]	@ (80025c4 <HAL_GPIO_Init+0x30c>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800244c:	6453      	str	r3, [r2, #68]	@ 0x44
 800244e:	4b5d      	ldr	r3, [pc, #372]	@ (80025c4 <HAL_GPIO_Init+0x30c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a5b      	ldr	r2, [pc, #364]	@ (80025c8 <HAL_GPIO_Init+0x310>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a52      	ldr	r2, [pc, #328]	@ (80025cc <HAL_GPIO_Init+0x314>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02b      	beq.n	80024de <HAL_GPIO_Init+0x226>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a51      	ldr	r2, [pc, #324]	@ (80025d0 <HAL_GPIO_Init+0x318>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d025      	beq.n	80024da <HAL_GPIO_Init+0x222>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a50      	ldr	r2, [pc, #320]	@ (80025d4 <HAL_GPIO_Init+0x31c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01f      	beq.n	80024d6 <HAL_GPIO_Init+0x21e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4f      	ldr	r2, [pc, #316]	@ (80025d8 <HAL_GPIO_Init+0x320>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x21a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4e      	ldr	r2, [pc, #312]	@ (80025dc <HAL_GPIO_Init+0x324>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x216>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4d      	ldr	r2, [pc, #308]	@ (80025e0 <HAL_GPIO_Init+0x328>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x212>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4c      	ldr	r2, [pc, #304]	@ (80025e4 <HAL_GPIO_Init+0x32c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4b      	ldr	r2, [pc, #300]	@ (80025e8 <HAL_GPIO_Init+0x330>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x20a>
 80024be:	2307      	movs	r3, #7
 80024c0:	e00e      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c2:	2308      	movs	r3, #8
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <HAL_GPIO_Init+0x310>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b3b      	ldr	r3, [pc, #236]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a32      	ldr	r2, [pc, #200]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b30      	ldr	r3, [pc, #192]	@ (80025ec <HAL_GPIO_Init+0x334>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a27      	ldr	r2, [pc, #156]	@ (80025ec <HAL_GPIO_Init+0x334>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002552:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002576:	4a1d      	ldr	r2, [pc, #116]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_GPIO_Init+0x334>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a0:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <HAL_GPIO_Init+0x334>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae90 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	@ 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40021c00 	.word	0x40021c00
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e12b      	b.n	800288e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fd5c 	bl	8001108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	@ 0x24
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002688:	f001 fa08 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 800268c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a81      	ldr	r2, [pc, #516]	@ (8002898 <HAL_I2C_Init+0x274>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d807      	bhi.n	80026a8 <HAL_I2C_Init+0x84>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a80      	ldr	r2, [pc, #512]	@ (800289c <HAL_I2C_Init+0x278>)
 800269c:	4293      	cmp	r3, r2
 800269e:	bf94      	ite	ls
 80026a0:	2301      	movls	r3, #1
 80026a2:	2300      	movhi	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e006      	b.n	80026b6 <HAL_I2C_Init+0x92>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4a7d      	ldr	r2, [pc, #500]	@ (80028a0 <HAL_I2C_Init+0x27c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf94      	ite	ls
 80026b0:	2301      	movls	r3, #1
 80026b2:	2300      	movhi	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0e7      	b.n	800288e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4a78      	ldr	r2, [pc, #480]	@ (80028a4 <HAL_I2C_Init+0x280>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0c9b      	lsrs	r3, r3, #18
 80026c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002898 <HAL_I2C_Init+0x274>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d802      	bhi.n	80026f8 <HAL_I2C_Init+0xd4>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	e009      	b.n	800270c <HAL_I2C_Init+0xe8>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	4a69      	ldr	r2, [pc, #420]	@ (80028a8 <HAL_I2C_Init+0x284>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	3301      	adds	r3, #1
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	430b      	orrs	r3, r1
 8002712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800271e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	495c      	ldr	r1, [pc, #368]	@ (8002898 <HAL_I2C_Init+0x274>)
 8002728:	428b      	cmp	r3, r1
 800272a:	d819      	bhi.n	8002760 <HAL_I2C_Init+0x13c>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1e59      	subs	r1, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fbb1 f3f3 	udiv	r3, r1, r3
 800273a:	1c59      	adds	r1, r3, #1
 800273c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002740:	400b      	ands	r3, r1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_I2C_Init+0x138>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e59      	subs	r1, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fbb1 f3f3 	udiv	r3, r1, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275a:	e051      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 800275c:	2304      	movs	r3, #4
 800275e:	e04f      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <HAL_I2C_Init+0x168>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e012      	b.n	80027b2 <HAL_I2C_Init+0x18e>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1e58      	subs	r0, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	0099      	lsls	r1, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Init+0x196>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e022      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10e      	bne.n	80027e0 <HAL_I2C_Init+0x1bc>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1e58      	subs	r0, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	440b      	add	r3, r1
 80027d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027de:	e00f      	b.n	8002800 <HAL_I2C_Init+0x1dc>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e58      	subs	r0, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	0099      	lsls	r1, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	6809      	ldr	r1, [r1, #0]
 8002804:	4313      	orrs	r3, r2
 8002806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800282e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6911      	ldr	r1, [r2, #16]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68d2      	ldr	r2, [r2, #12]
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	000186a0 	.word	0x000186a0
 800289c:	001e847f 	.word	0x001e847f
 80028a0:	003d08ff 	.word	0x003d08ff
 80028a4:	431bde83 	.word	0x431bde83
 80028a8:	10624dd3 	.word	0x10624dd3

080028ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	461a      	mov	r2, r3
 80028b8:	460b      	mov	r3, r1
 80028ba:	817b      	strh	r3, [r7, #10]
 80028bc:	4613      	mov	r3, r2
 80028be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7fe fe20 	bl	8001504 <HAL_GetTick>
 80028c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	f040 80e0 	bne.w	8002a94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2319      	movs	r3, #25
 80028da:	2201      	movs	r2, #1
 80028dc:	4970      	ldr	r1, [pc, #448]	@ (8002aa0 <HAL_I2C_Master_Transmit+0x1f4>)
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fa92 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	e0d3      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_I2C_Master_Transmit+0x50>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0cc      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1ea>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d007      	beq.n	8002922 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002930:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2221      	movs	r2, #33	@ 0x21
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2210      	movs	r2, #16
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	893a      	ldrh	r2, [r7, #8]
 8002952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a50      	ldr	r2, [pc, #320]	@ (8002aa4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002962:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002964:	8979      	ldrh	r1, [r7, #10]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f9ca 	bl	8002d04 <I2C_MasterRequestWrite>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e08d      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002990:	e066      	b.n	8002a60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	6a39      	ldr	r1, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fb50 	bl	800303c <I2C_WaitOnTXEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d107      	bne.n	80029ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06b      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d11b      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0x188>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d017      	beq.n	8002a34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	6a39      	ldr	r1, [r7, #32]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fb47 	bl	80030cc <I2C_WaitOnBTFFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00d      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d107      	bne.n	8002a5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e01a      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d194      	bne.n	8002992 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	00100002 	.word	0x00100002
 8002aa4:	ffff0000 	.word	0xffff0000

08002aa8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	@ 0x28
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7fe fd24 	bl	8001504 <HAL_GetTick>
 8002abc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	f040 8111 	bne.w	8002cf2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2319      	movs	r3, #25
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4988      	ldr	r1, [pc, #544]	@ (8002cfc <HAL_I2C_IsDeviceReady+0x254>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f994 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e104      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_IsDeviceReady+0x50>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0fd      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d007      	beq.n	8002b1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2224      	movs	r2, #36	@ 0x24
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a70      	ldr	r2, [pc, #448]	@ (8002d00 <HAL_I2C_IsDeviceReady+0x258>)
 8002b40:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f952 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b78:	d103      	bne.n	8002b82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b80:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0b6      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fcb5 	bl	8001504 <HAL_GetTick>
 8002b9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bca:	e025      	b.n	8002c18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bcc:	f7fe fc9a 	bl	8001504 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d302      	bcc.n	8002be2 <HAL_I2C_IsDeviceReady+0x13a>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	22a0      	movs	r2, #160	@ 0xa0
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c22:	d005      	beq.n	8002c30 <HAL_I2C_IsDeviceReady+0x188>
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_I2C_IsDeviceReady+0x188>
 8002c2a:	7dbb      	ldrb	r3, [r7, #22]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0cd      	beq.n	8002bcc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d129      	bne.n	8002c9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2319      	movs	r3, #25
 8002c72:	2201      	movs	r2, #1
 8002c74:	4921      	ldr	r1, [pc, #132]	@ (8002cfc <HAL_I2C_IsDeviceReady+0x254>)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f8c6 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e036      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e02c      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cb2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2319      	movs	r3, #25
 8002cba:	2201      	movs	r2, #1
 8002cbc:	490f      	ldr	r1, [pc, #60]	@ (8002cfc <HAL_I2C_IsDeviceReady+0x254>)
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f8a2 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e012      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f4ff af32 	bcc.w	8002b42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	00100002 	.word	0x00100002
 8002d00:	ffff0000 	.word	0xffff0000

08002d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	460b      	mov	r3, r1
 8002d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d006      	beq.n	8002d2e <I2C_MasterRequestWrite+0x2a>
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d003      	beq.n	8002d2e <I2C_MasterRequestWrite+0x2a>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d2c:	d108      	bne.n	8002d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e00b      	b.n	8002d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d44:	2b12      	cmp	r3, #18
 8002d46:	d107      	bne.n	8002d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f84f 	bl	8002e08 <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d7e:	d103      	bne.n	8002d88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e035      	b.n	8002df8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d94:	d108      	bne.n	8002da8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002da4:	611a      	str	r2, [r3, #16]
 8002da6:	e01b      	b.n	8002de0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002da8:	897b      	ldrh	r3, [r7, #10]
 8002daa:	11db      	asrs	r3, r3, #7
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0306 	and.w	r3, r3, #6
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f063 030f 	orn	r3, r3, #15
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	490e      	ldr	r1, [pc, #56]	@ (8002e00 <I2C_MasterRequestWrite+0xfc>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f898 	bl	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e010      	b.n	8002df8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dd6:	897b      	ldrh	r3, [r7, #10]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4907      	ldr	r1, [pc, #28]	@ (8002e04 <I2C_MasterRequestWrite+0x100>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f888 	bl	8002efc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010008 	.word	0x00010008
 8002e04:	00010002 	.word	0x00010002

08002e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e18:	e048      	b.n	8002eac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e20:	d044      	beq.n	8002eac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe fb6f 	bl	8001504 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d139      	bne.n	8002eac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10d      	bne.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	e00c      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	43da      	mvns	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d116      	bne.n	8002eac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	f043 0220 	orr.w	r2, r3, #32
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e023      	b.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d10d      	bne.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	e00c      	b.n	8002eec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d093      	beq.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f0a:	e071      	b.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1a:	d123      	bne.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e067      	b.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f6a:	d041      	beq.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6c:	f7fe faca 	bl	8001504 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d302      	bcc.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d136      	bne.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d10c      	bne.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4013      	ands	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e00b      	b.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	43da      	mvns	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf14      	ite	ne
 8002fb8:	2301      	movne	r3, #1
 8002fba:	2300      	moveq	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e021      	b.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10c      	bne.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e00b      	b.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	f47f af6d 	bne.w	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003048:	e034      	b.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f886 	bl	800315c <I2C_IsAcknowledgeFailed>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e034      	b.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003060:	d028      	beq.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003062:	f7fe fa4f 	bl	8001504 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11d      	bne.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b80      	cmp	r3, #128	@ 0x80
 8003084:	d016      	beq.n	80030b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	f043 0220 	orr.w	r2, r3, #32
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e007      	b.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030be:	2b80      	cmp	r3, #128	@ 0x80
 80030c0:	d1c3      	bne.n	800304a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d8:	e034      	b.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f83e 	bl	800315c <I2C_IsAcknowledgeFailed>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e034      	b.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030f0:	d028      	beq.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fe fa07 	bl	8001504 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d11d      	bne.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d016      	beq.n	8003144 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d1c3      	bne.n	80030da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003172:	d11b      	bne.n	80031ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800317c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f043 0204 	orr.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e267      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d075      	beq.n	80032c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031da:	4b88      	ldr	r3, [pc, #544]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d00c      	beq.n	8003200 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4b85      	ldr	r3, [pc, #532]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d112      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b82      	ldr	r3, [pc, #520]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031fe:	d10b      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b7e      	ldr	r3, [pc, #504]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d157      	bne.n	80032c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e242      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x74>
 8003222:	4b76      	ldr	r3, [pc, #472]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a75      	ldr	r2, [pc, #468]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b70      	ldr	r3, [pc, #448]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6f      	ldr	r2, [pc, #444]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6d      	ldr	r3, [pc, #436]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6c      	ldr	r2, [pc, #432]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003254:	4b69      	ldr	r3, [pc, #420]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a68      	ldr	r2, [pc, #416]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b66      	ldr	r3, [pc, #408]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a65      	ldr	r2, [pc, #404]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe f946 	bl	8001504 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe f942 	bl	8001504 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	@ 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e207      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b5b      	ldr	r3, [pc, #364]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xc0>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe f932 	bl	8001504 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe f92e 	bl	8001504 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1f3      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b51      	ldr	r3, [pc, #324]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0xe8>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032d2:	4b4a      	ldr	r3, [pc, #296]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b47      	ldr	r3, [pc, #284]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b44      	ldr	r3, [pc, #272]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b41      	ldr	r3, [pc, #260]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1c7      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3b      	ldr	r3, [pc, #236]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4937      	ldr	r1, [pc, #220]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b34      	ldr	r3, [pc, #208]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe f8e7 	bl	8001504 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe f8e3 	bl	8001504 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1a8      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2b      	ldr	r3, [pc, #172]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b28      	ldr	r3, [pc, #160]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4925      	ldr	r1, [pc, #148]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b24      	ldr	r3, [pc, #144]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f8c6 	bl	8001504 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe f8c2 	bl	8001504 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e187      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1b      	ldr	r3, [pc, #108]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d036      	beq.n	8003414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b15      	ldr	r3, [pc, #84]	@ (8003404 <HAL_RCC_OscConfig+0x248>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe f8a6 	bl	8001504 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fe f8a2 	bl	8001504 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e167      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_OscConfig+0x240>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x200>
 80033da:	e01b      	b.n	8003414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <HAL_RCC_OscConfig+0x248>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe f88f 	bl	8001504 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	e00e      	b.n	8003408 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe f88b 	bl	8001504 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d907      	bls.n	8003408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e150      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
 80033fc:	40023800 	.word	0x40023800
 8003400:	42470000 	.word	0x42470000
 8003404:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b88      	ldr	r3, [pc, #544]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ea      	bne.n	80033ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8097 	beq.w	8003550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b81      	ldr	r3, [pc, #516]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b7d      	ldr	r3, [pc, #500]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	4a7c      	ldr	r2, [pc, #496]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	@ 0x40
 8003442:	4b7a      	ldr	r3, [pc, #488]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b77      	ldr	r3, [pc, #476]	@ (8003630 <HAL_RCC_OscConfig+0x474>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345e:	4b74      	ldr	r3, [pc, #464]	@ (8003630 <HAL_RCC_OscConfig+0x474>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a73      	ldr	r2, [pc, #460]	@ (8003630 <HAL_RCC_OscConfig+0x474>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fe f84b 	bl	8001504 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003472:	f7fe f847 	bl	8001504 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e10c      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	4b6a      	ldr	r3, [pc, #424]	@ (8003630 <HAL_RCC_OscConfig+0x474>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2ea>
 8003498:	4b64      	ldr	r3, [pc, #400]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	4a63      	ldr	r2, [pc, #396]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x324>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x30c>
 80034ae:	4b5f      	ldr	r3, [pc, #380]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	4a5e      	ldr	r2, [pc, #376]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ba:	4b5c      	ldr	r3, [pc, #368]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	4a5b      	ldr	r2, [pc, #364]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0x324>
 80034c8:	4b58      	ldr	r3, [pc, #352]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034cc:	4a57      	ldr	r2, [pc, #348]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d4:	4b55      	ldr	r3, [pc, #340]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d8:	4a54      	ldr	r2, [pc, #336]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80034da:	f023 0304 	bic.w	r3, r3, #4
 80034de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fe f80c 	bl	8001504 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe f808 	bl	8001504 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0cb      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	4b49      	ldr	r3, [pc, #292]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0ee      	beq.n	80034f0 <HAL_RCC_OscConfig+0x334>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7fd fff6 	bl	8001504 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fd fff2 	bl	8001504 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0b5      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	4b3e      	ldr	r3, [pc, #248]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ee      	bne.n	800351c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b39      	ldr	r3, [pc, #228]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	4a38      	ldr	r2, [pc, #224]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800354e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a1 	beq.w	800369c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355a:	4b34      	ldr	r3, [pc, #208]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b08      	cmp	r3, #8
 8003564:	d05c      	beq.n	8003620 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d141      	bne.n	80035f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b31      	ldr	r3, [pc, #196]	@ (8003634 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fd ffc6 	bl	8001504 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fd ffc2 	bl	8001504 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e087      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b27      	ldr	r3, [pc, #156]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	491b      	ldr	r1, [pc, #108]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x478>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fd ff9b 	bl	8001504 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fd ff97 	bl	8001504 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e05c      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e4:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x416>
 80035f0:	e054      	b.n	800369c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b10      	ldr	r3, [pc, #64]	@ (8003634 <HAL_RCC_OscConfig+0x478>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fd ff84 	bl	8001504 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fd ff80 	bl	8001504 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e045      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	4b06      	ldr	r3, [pc, #24]	@ (800362c <HAL_RCC_OscConfig+0x470>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x444>
 800361e:	e03d      	b.n	800369c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e038      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
 800362c:	40023800 	.word	0x40023800
 8003630:	40007000 	.word	0x40007000
 8003634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003638:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <HAL_RCC_OscConfig+0x4ec>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d028      	beq.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d121      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d11a      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800366e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3b01      	subs	r3, #1
 8003682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d107      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0cc      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b68      	ldr	r3, [pc, #416]	@ (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d90c      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b65      	ldr	r3, [pc, #404]	@ (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b63      	ldr	r3, [pc, #396]	@ (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0b8      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b59      	ldr	r3, [pc, #356]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a58      	ldr	r2, [pc, #352]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800370a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003718:	4b53      	ldr	r3, [pc, #332]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a52      	ldr	r2, [pc, #328]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003724:	4b50      	ldr	r3, [pc, #320]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	494d      	ldr	r1, [pc, #308]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d044      	beq.n	80037cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b47      	ldr	r3, [pc, #284]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d119      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	2b03      	cmp	r3, #3
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b3f      	ldr	r3, [pc, #252]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3b      	ldr	r3, [pc, #236]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e067      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b37      	ldr	r3, [pc, #220]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4934      	ldr	r1, [pc, #208]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7fd feb2 	bl	8001504 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd feae 	bl	8001504 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e04f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b25      	ldr	r3, [pc, #148]	@ (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d20c      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b22      	ldr	r3, [pc, #136]	@ (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b20      	ldr	r3, [pc, #128]	@ (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e032      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4916      	ldr	r1, [pc, #88]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381e:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	490e      	ldr	r1, [pc, #56]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003832:	f000 f821 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	490a      	ldr	r1, [pc, #40]	@ (800386c <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a09      	ldr	r2, [pc, #36]	@ (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800384e:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fe12 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023c00 	.word	0x40023c00
 8003868:	40023800 	.word	0x40023800
 800386c:	08005a30 	.word	0x08005a30
 8003870:	20000000 	.word	0x20000000
 8003874:	20000004 	.word	0x20000004

08003878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b094      	sub	sp, #80	@ 0x50
 800387e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003890:	4b79      	ldr	r3, [pc, #484]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d00d      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x40>
 800389c:	2b08      	cmp	r3, #8
 800389e:	f200 80e1 	bhi.w	8003a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x34>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038aa:	e0db      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b73      	ldr	r3, [pc, #460]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80038ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038b0:	e0db      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b2:	4b73      	ldr	r3, [pc, #460]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80038b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038b6:	e0d8      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d063      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	2200      	movs	r2, #0
 80038d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038e2:	2300      	movs	r3, #0
 80038e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038ea:	4622      	mov	r2, r4
 80038ec:	462b      	mov	r3, r5
 80038ee:	f04f 0000 	mov.w	r0, #0
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	0159      	lsls	r1, r3, #5
 80038f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038fc:	0150      	lsls	r0, r2, #5
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4621      	mov	r1, r4
 8003904:	1a51      	subs	r1, r2, r1
 8003906:	6139      	str	r1, [r7, #16]
 8003908:	4629      	mov	r1, r5
 800390a:	eb63 0301 	sbc.w	r3, r3, r1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800391c:	4659      	mov	r1, fp
 800391e:	018b      	lsls	r3, r1, #6
 8003920:	4651      	mov	r1, sl
 8003922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003926:	4651      	mov	r1, sl
 8003928:	018a      	lsls	r2, r1, #6
 800392a:	4651      	mov	r1, sl
 800392c:	ebb2 0801 	subs.w	r8, r2, r1
 8003930:	4659      	mov	r1, fp
 8003932:	eb63 0901 	sbc.w	r9, r3, r1
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800394a:	4690      	mov	r8, r2
 800394c:	4699      	mov	r9, r3
 800394e:	4623      	mov	r3, r4
 8003950:	eb18 0303 	adds.w	r3, r8, r3
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	462b      	mov	r3, r5
 8003958:	eb49 0303 	adc.w	r3, r9, r3
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800396a:	4629      	mov	r1, r5
 800396c:	024b      	lsls	r3, r1, #9
 800396e:	4621      	mov	r1, r4
 8003970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003974:	4621      	mov	r1, r4
 8003976:	024a      	lsls	r2, r1, #9
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397e:	2200      	movs	r2, #0
 8003980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003988:	f7fc fc7a 	bl	8000280 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4613      	mov	r3, r2
 8003992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003994:	e058      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003996:	4b38      	ldr	r3, [pc, #224]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	099b      	lsrs	r3, r3, #6
 800399c:	2200      	movs	r2, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	4611      	mov	r1, r2
 80039a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	2300      	movs	r3, #0
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	f04f 0000 	mov.w	r0, #0
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	0159      	lsls	r1, r3, #5
 80039be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039c2:	0150      	lsls	r0, r2, #5
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4641      	mov	r1, r8
 80039ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ce:	4649      	mov	r1, r9
 80039d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039e8:	ebb2 040a 	subs.w	r4, r2, sl
 80039ec:	eb63 050b 	sbc.w	r5, r3, fp
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	00eb      	lsls	r3, r5, #3
 80039fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039fe:	00e2      	lsls	r2, r4, #3
 8003a00:	4614      	mov	r4, r2
 8003a02:	461d      	mov	r5, r3
 8003a04:	4643      	mov	r3, r8
 8003a06:	18e3      	adds	r3, r4, r3
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	eb45 0303 	adc.w	r3, r5, r3
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a1e:	4629      	mov	r1, r5
 8003a20:	028b      	lsls	r3, r1, #10
 8003a22:	4621      	mov	r1, r4
 8003a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a28:	4621      	mov	r1, r4
 8003a2a:	028a      	lsls	r2, r1, #10
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a32:	2200      	movs	r2, #0
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	61fa      	str	r2, [r7, #28]
 8003a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a3c:	f7fc fc20 	bl	8000280 <__aeabi_uldivmod>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4613      	mov	r3, r2
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	0c1b      	lsrs	r3, r3, #16
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	3301      	adds	r3, #1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3750      	adds	r7, #80	@ 0x50
 8003a70:	46bd      	mov	sp, r7
 8003a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	007a1200 	.word	0x007a1200

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a88:	4b03      	ldr	r3, [pc, #12]	@ (8003a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000

08003a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa0:	f7ff fff0 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	@ (8003abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0a9b      	lsrs	r3, r3, #10
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	@ (8003ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08005a40 	.word	0x08005a40

08003ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ac8:	f7ff ffdc 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	0b5b      	lsrs	r3, r3, #13
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4903      	ldr	r1, [pc, #12]	@ (8003ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	08005a40 	.word	0x08005a40

08003aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e041      	b.n	8003b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd fb40 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f000 fad8 	bl	80040e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e041      	b.n	8003c20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f839 	bl	8003c28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f000 fa89 	bl	80040e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIM_PWM_Start+0x24>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e022      	b.n	8003ca6 <HAL_TIM_PWM_Start+0x6a>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d109      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x3e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	bf14      	ite	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	2300      	moveq	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e015      	b.n	8003ca6 <HAL_TIM_PWM_Start+0x6a>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d109      	bne.n	8003c94 <HAL_TIM_PWM_Start+0x58>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e008      	b.n	8003ca6 <HAL_TIM_PWM_Start+0x6a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e07c      	b.n	8003da8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_PWM_Start+0x82>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cbc:	e013      	b.n	8003ce6 <HAL_TIM_PWM_Start+0xaa>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_PWM_Start+0x92>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ccc:	e00b      	b.n	8003ce6 <HAL_TIM_PWM_Start+0xaa>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_PWM_Start+0xa2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cdc:	e003      	b.n	8003ce6 <HAL_TIM_PWM_Start+0xaa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2201      	movs	r2, #1
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fcec 	bl	80046cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8003db0 <HAL_TIM_PWM_Start+0x174>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_TIM_PWM_Start+0xcc>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	@ (8003db4 <HAL_TIM_PWM_Start+0x178>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <HAL_TIM_PWM_Start+0xd0>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_TIM_PWM_Start+0xd2>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a22      	ldr	r2, [pc, #136]	@ (8003db0 <HAL_TIM_PWM_Start+0x174>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x136>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d01d      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x136>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003db8 <HAL_TIM_PWM_Start+0x17c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x136>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1d      	ldr	r2, [pc, #116]	@ (8003dbc <HAL_TIM_PWM_Start+0x180>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x136>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc0 <HAL_TIM_PWM_Start+0x184>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x136>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a16      	ldr	r2, [pc, #88]	@ (8003db4 <HAL_TIM_PWM_Start+0x178>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x136>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a18      	ldr	r2, [pc, #96]	@ (8003dc4 <HAL_TIM_PWM_Start+0x188>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x136>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a16      	ldr	r2, [pc, #88]	@ (8003dc8 <HAL_TIM_PWM_Start+0x18c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d111      	bne.n	8003d96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d010      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d94:	e007      	b.n	8003da6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40010000 	.word	0x40010000
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800
 8003dc0:	40000c00 	.word	0x40000c00
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40001800 	.word	0x40001800

08003dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0ae      	b.n	8003f48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	f200 809f 	bhi.w	8003f38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003f39 	.word	0x08003f39
 8003e08:	08003f39 	.word	0x08003f39
 8003e0c:	08003f39 	.word	0x08003f39
 8003e10:	08003e75 	.word	0x08003e75
 8003e14:	08003f39 	.word	0x08003f39
 8003e18:	08003f39 	.word	0x08003f39
 8003e1c:	08003f39 	.word	0x08003f39
 8003e20:	08003eb7 	.word	0x08003eb7
 8003e24:	08003f39 	.word	0x08003f39
 8003e28:	08003f39 	.word	0x08003f39
 8003e2c:	08003f39 	.word	0x08003f39
 8003e30:	08003ef7 	.word	0x08003ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f9fc 	bl	8004238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0208 	orr.w	r2, r2, #8
 8003e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0204 	bic.w	r2, r2, #4
 8003e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6999      	ldr	r1, [r3, #24]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	619a      	str	r2, [r3, #24]
      break;
 8003e72:	e064      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fa4c 	bl	8004318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6999      	ldr	r1, [r3, #24]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	619a      	str	r2, [r3, #24]
      break;
 8003eb4:	e043      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 faa1 	bl	8004404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0208 	orr.w	r2, r2, #8
 8003ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0204 	bic.w	r2, r2, #4
 8003ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69d9      	ldr	r1, [r3, #28]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	61da      	str	r2, [r3, #28]
      break;
 8003ef4:	e023      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 faf5 	bl	80044ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69d9      	ldr	r1, [r3, #28]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	021a      	lsls	r2, r3, #8
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	61da      	str	r2, [r3, #28]
      break;
 8003f36:	e002      	b.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_TIM_ConfigClockSource+0x1c>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e0b4      	b.n	80040d6 <HAL_TIM_ConfigClockSource+0x186>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa4:	d03e      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0xd4>
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003faa:	f200 8087 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb2:	f000 8086 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x172>
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fba:	d87f      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b70      	cmp	r3, #112	@ 0x70
 8003fbe:	d01a      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8003fc0:	2b70      	cmp	r3, #112	@ 0x70
 8003fc2:	d87b      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fc4:	2b60      	cmp	r3, #96	@ 0x60
 8003fc6:	d050      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x11a>
 8003fc8:	2b60      	cmp	r3, #96	@ 0x60
 8003fca:	d877      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b50      	cmp	r3, #80	@ 0x50
 8003fce:	d03c      	beq.n	800404a <HAL_TIM_ConfigClockSource+0xfa>
 8003fd0:	2b50      	cmp	r3, #80	@ 0x50
 8003fd2:	d873      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b40      	cmp	r3, #64	@ 0x40
 8003fd6:	d058      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x13a>
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	d86f      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b30      	cmp	r3, #48	@ 0x30
 8003fde:	d064      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x15a>
 8003fe0:	2b30      	cmp	r3, #48	@ 0x30
 8003fe2:	d86b      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d060      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x15a>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d867      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d05c      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d05a      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x15a>
 8003ff4:	e062      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004006:	f000 fb41 	bl	800468c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	609a      	str	r2, [r3, #8]
      break;
 8004022:	e04f      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	f000 fb2a 	bl	800468c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004046:	609a      	str	r2, [r3, #8]
      break;
 8004048:	e03c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	461a      	mov	r2, r3
 8004058:	f000 fa9e 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2150      	movs	r1, #80	@ 0x50
 8004062:	4618      	mov	r0, r3
 8004064:	f000 faf7 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 8004068:	e02c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004076:	461a      	mov	r2, r3
 8004078:	f000 fabd 	bl	80045f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2160      	movs	r1, #96	@ 0x60
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fae7 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 8004088:	e01c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004096:	461a      	mov	r2, r3
 8004098:	f000 fa7e 	bl	8004598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2140      	movs	r1, #64	@ 0x40
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fad7 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e00c      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f000 face 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 80040ba:	e003      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
      break;
 80040c0:	e000      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a46      	ldr	r2, [pc, #280]	@ (800420c <TIM_Base_SetConfig+0x12c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fe:	d00f      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a43      	ldr	r2, [pc, #268]	@ (8004210 <TIM_Base_SetConfig+0x130>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00b      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a42      	ldr	r2, [pc, #264]	@ (8004214 <TIM_Base_SetConfig+0x134>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a41      	ldr	r2, [pc, #260]	@ (8004218 <TIM_Base_SetConfig+0x138>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a40      	ldr	r2, [pc, #256]	@ (800421c <TIM_Base_SetConfig+0x13c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d108      	bne.n	8004132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a35      	ldr	r2, [pc, #212]	@ (800420c <TIM_Base_SetConfig+0x12c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d02b      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004140:	d027      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a32      	ldr	r2, [pc, #200]	@ (8004210 <TIM_Base_SetConfig+0x130>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d023      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a31      	ldr	r2, [pc, #196]	@ (8004214 <TIM_Base_SetConfig+0x134>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01f      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a30      	ldr	r2, [pc, #192]	@ (8004218 <TIM_Base_SetConfig+0x138>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01b      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2f      	ldr	r2, [pc, #188]	@ (800421c <TIM_Base_SetConfig+0x13c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d017      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2e      	ldr	r2, [pc, #184]	@ (8004220 <TIM_Base_SetConfig+0x140>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2d      	ldr	r2, [pc, #180]	@ (8004224 <TIM_Base_SetConfig+0x144>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00f      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2c      	ldr	r2, [pc, #176]	@ (8004228 <TIM_Base_SetConfig+0x148>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2b      	ldr	r2, [pc, #172]	@ (800422c <TIM_Base_SetConfig+0x14c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2a      	ldr	r2, [pc, #168]	@ (8004230 <TIM_Base_SetConfig+0x150>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a29      	ldr	r2, [pc, #164]	@ (8004234 <TIM_Base_SetConfig+0x154>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d108      	bne.n	80041a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a10      	ldr	r2, [pc, #64]	@ (800420c <TIM_Base_SetConfig+0x12c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_Base_SetConfig+0xf8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a12      	ldr	r2, [pc, #72]	@ (800421c <TIM_Base_SetConfig+0x13c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d103      	bne.n	80041e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d105      	bne.n	80041fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]
  }
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40010400 	.word	0x40010400
 8004220:	40014000 	.word	0x40014000
 8004224:	40014400 	.word	0x40014400
 8004228:	40014800 	.word	0x40014800
 800422c:	40001800 	.word	0x40001800
 8004230:	40001c00 	.word	0x40001c00
 8004234:	40002000 	.word	0x40002000

08004238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 0201 	bic.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 0302 	bic.w	r3, r3, #2
 8004280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <TIM_OC1_SetConfig+0xd8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_OC1_SetConfig+0x64>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <TIM_OC1_SetConfig+0xdc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10c      	bne.n	80042b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0308 	bic.w	r3, r3, #8
 80042a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f023 0304 	bic.w	r3, r3, #4
 80042b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <TIM_OC1_SetConfig+0xd8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d003      	beq.n	80042c6 <TIM_OC1_SetConfig+0x8e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <TIM_OC1_SetConfig+0xdc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d111      	bne.n	80042ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	621a      	str	r2, [r3, #32]
}
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40010000 	.word	0x40010000
 8004314:	40010400 	.word	0x40010400

08004318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f023 0210 	bic.w	r2, r3, #16
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800434e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0320 	bic.w	r3, r3, #32
 8004362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a22      	ldr	r2, [pc, #136]	@ (80043fc <TIM_OC2_SetConfig+0xe4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_OC2_SetConfig+0x68>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <TIM_OC2_SetConfig+0xe8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10d      	bne.n	800439c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800439a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <TIM_OC2_SetConfig+0xe4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_OC2_SetConfig+0x94>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a16      	ldr	r2, [pc, #88]	@ (8004400 <TIM_OC2_SetConfig+0xe8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d113      	bne.n	80043d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40010400 	.word	0x40010400

08004404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a21      	ldr	r2, [pc, #132]	@ (80044e4 <TIM_OC3_SetConfig+0xe0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_OC3_SetConfig+0x66>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a20      	ldr	r2, [pc, #128]	@ (80044e8 <TIM_OC3_SetConfig+0xe4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10d      	bne.n	8004486 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a16      	ldr	r2, [pc, #88]	@ (80044e4 <TIM_OC3_SetConfig+0xe0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <TIM_OC3_SetConfig+0x92>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a15      	ldr	r2, [pc, #84]	@ (80044e8 <TIM_OC3_SetConfig+0xe4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d113      	bne.n	80044be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800449c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40010400 	.word	0x40010400

080044ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	031b      	lsls	r3, r3, #12
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a12      	ldr	r2, [pc, #72]	@ (8004590 <TIM_OC4_SetConfig+0xa4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_OC4_SetConfig+0x68>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a11      	ldr	r2, [pc, #68]	@ (8004594 <TIM_OC4_SetConfig+0xa8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d109      	bne.n	8004568 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800455a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 030a 	bic.w	r3, r3, #10
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b087      	sub	sp, #28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f023 0210 	bic.w	r2, r3, #16
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004632:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	f043 0307 	orr.w	r3, r3, #7
 8004678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	609a      	str	r2, [r3, #8]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	021a      	lsls	r2, r3, #8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2201      	movs	r2, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1a      	ldr	r2, [r3, #32]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	401a      	ands	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	fa01 f303 	lsl.w	r3, r1, r3
 8004704:	431a      	orrs	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e05a      	b.n	80047e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a21      	ldr	r2, [pc, #132]	@ (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477c:	d01d      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1d      	ldr	r2, [pc, #116]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1b      	ldr	r2, [pc, #108]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1a      	ldr	r2, [pc, #104]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a18      	ldr	r2, [pc, #96]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a17      	ldr	r2, [pc, #92]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a15      	ldr	r2, [pc, #84]	@ (800480c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d10c      	bne.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40010000 	.word	0x40010000
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40000800 	.word	0x40000800
 8004800:	40000c00 	.word	0x40000c00
 8004804:	40010400 	.word	0x40010400
 8004808:	40014000 	.word	0x40014000
 800480c:	40001800 	.word	0x40001800

08004810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004828:	2302      	movs	r3, #2
 800482a:	e03d      	b.n	80048a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e042      	b.n	800494c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fc fcb8 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	@ 0x24
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f921 	bl	8004b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800490c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800491c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800492c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	@ 0x28
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b20      	cmp	r3, #32
 8004972:	d175      	bne.n	8004a60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_UART_Transmit+0x2c>
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e06e      	b.n	8004a62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2221      	movs	r2, #33	@ 0x21
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004992:	f7fc fdb7 	bl	8001504 <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ac:	d108      	bne.n	80049c0 <HAL_UART_Transmit+0x6c>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	e003      	b.n	80049c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049c8:	e02e      	b.n	8004a28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2180      	movs	r1, #128	@ 0x80
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f848 	bl	8004a6a <UART_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e03a      	b.n	8004a62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	3302      	adds	r3, #2
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e007      	b.n	8004a1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3301      	adds	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1cb      	bne.n	80049ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2140      	movs	r1, #64	@ 0x40
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f814 	bl	8004a6a <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e006      	b.n	8004a62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e000      	b.n	8004a62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7a:	e03b      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a82:	d037      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a84:	f7fc fd3e 	bl	8001504 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	6a3a      	ldr	r2, [r7, #32]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d302      	bcc.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e03a      	b.n	8004b14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d023      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b80      	cmp	r3, #128	@ 0x80
 8004ab0:	d020      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b40      	cmp	r3, #64	@ 0x40
 8004ab6:	d01d      	beq.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d116      	bne.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f81d 	bl	8004b1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e00f      	b.n	8004b14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d0b4      	beq.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }
  */
  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b0c0      	sub	sp, #256	@ 0x100
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	68d9      	ldr	r1, [r3, #12]
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	ea40 0301 	orr.w	r3, r0, r1
 8004b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b98:	f021 010c 	bic.w	r1, r1, #12
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bba:	6999      	ldr	r1, [r3, #24]
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	ea40 0301 	orr.w	r3, r0, r1
 8004bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4b8f      	ldr	r3, [pc, #572]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d005      	beq.n	8004be0 <UART_SetConfig+0xa0>
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b8d      	ldr	r3, [pc, #564]	@ (8004e10 <UART_SetConfig+0x2d0>)
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d104      	bne.n	8004bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe ff70 	bl	8003ac4 <HAL_RCC_GetPCLK2Freq>
 8004be4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004be8:	e003      	b.n	8004bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bea:	f7fe ff57 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8004bee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bfc:	f040 810c 	bne.w	8004e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	1891      	adds	r1, r2, r2
 8004c18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c1a:	415b      	adcs	r3, r3
 8004c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c22:	4621      	mov	r1, r4
 8004c24:	eb12 0801 	adds.w	r8, r2, r1
 8004c28:	4629      	mov	r1, r5
 8004c2a:	eb43 0901 	adc.w	r9, r3, r1
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c42:	4690      	mov	r8, r2
 8004c44:	4699      	mov	r9, r3
 8004c46:	4623      	mov	r3, r4
 8004c48:	eb18 0303 	adds.w	r3, r8, r3
 8004c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c50:	462b      	mov	r3, r5
 8004c52:	eb49 0303 	adc.w	r3, r9, r3
 8004c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c6e:	460b      	mov	r3, r1
 8004c70:	18db      	adds	r3, r3, r3
 8004c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c74:	4613      	mov	r3, r2
 8004c76:	eb42 0303 	adc.w	r3, r2, r3
 8004c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c84:	f7fb fafc 	bl	8000280 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4b61      	ldr	r3, [pc, #388]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	011c      	lsls	r4, r3, #4
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	1891      	adds	r1, r2, r2
 8004cae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cb0:	415b      	adcs	r3, r3
 8004cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cb8:	4641      	mov	r1, r8
 8004cba:	eb12 0a01 	adds.w	sl, r2, r1
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cd8:	4692      	mov	sl, r2
 8004cda:	469b      	mov	fp, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	eb1a 0303 	adds.w	r3, sl, r3
 8004ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d04:	460b      	mov	r3, r1
 8004d06:	18db      	adds	r3, r3, r3
 8004d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d1a:	f7fb fab1 	bl	8000280 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004d26:	fba3 2301 	umull	r2, r3, r3, r1
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2264      	movs	r2, #100	@ 0x64
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	1acb      	subs	r3, r1, r3
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d3a:	4b36      	ldr	r3, [pc, #216]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d48:	441c      	add	r4, r3
 8004d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d64:	415b      	adcs	r3, r3
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	1851      	adds	r1, r2, r1
 8004d70:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d72:	4649      	mov	r1, r9
 8004d74:	414b      	adcs	r3, r1
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d84:	4659      	mov	r1, fp
 8004d86:	00cb      	lsls	r3, r1, #3
 8004d88:	4651      	mov	r1, sl
 8004d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8e:	4651      	mov	r1, sl
 8004d90:	00ca      	lsls	r2, r1, #3
 8004d92:	4610      	mov	r0, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004da0:	464b      	mov	r3, r9
 8004da2:	460a      	mov	r2, r1
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004db8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	18db      	adds	r3, r3, r3
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	eb42 0303 	adc.w	r3, r2, r3
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dd6:	f7fb fa53 	bl	8000280 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4b0d      	ldr	r3, [pc, #52]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004de0:	fba3 1302 	umull	r1, r3, r3, r2
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	2164      	movs	r1, #100	@ 0x64
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	3332      	adds	r3, #50	@ 0x32
 8004df2:	4a08      	ldr	r2, [pc, #32]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	f003 0207 	and.w	r2, r3, #7
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4422      	add	r2, r4
 8004e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e08:	e106      	b.n	8005018 <UART_SetConfig+0x4d8>
 8004e0a:	bf00      	nop
 8004e0c:	40011000 	.word	0x40011000
 8004e10:	40011400 	.word	0x40011400
 8004e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	1891      	adds	r1, r2, r2
 8004e30:	6239      	str	r1, [r7, #32]
 8004e32:	415b      	adcs	r3, r3
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	1854      	adds	r4, r2, r1
 8004e3e:	4649      	mov	r1, r9
 8004e40:	eb43 0501 	adc.w	r5, r3, r1
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	00eb      	lsls	r3, r5, #3
 8004e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e52:	00e2      	lsls	r2, r4, #3
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	18e3      	adds	r3, r4, r3
 8004e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e60:	464b      	mov	r3, r9
 8004e62:	eb45 0303 	adc.w	r3, r5, r3
 8004e66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e86:	4629      	mov	r1, r5
 8004e88:	008b      	lsls	r3, r1, #2
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e90:	4621      	mov	r1, r4
 8004e92:	008a      	lsls	r2, r1, #2
 8004e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e98:	f7fb f9f2 	bl	8000280 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4b60      	ldr	r3, [pc, #384]	@ (8005024 <UART_SetConfig+0x4e4>)
 8004ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	011c      	lsls	r4, r3, #4
 8004eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004eb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	1891      	adds	r1, r2, r2
 8004ec2:	61b9      	str	r1, [r7, #24]
 8004ec4:	415b      	adcs	r3, r3
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ecc:	4641      	mov	r1, r8
 8004ece:	1851      	adds	r1, r2, r1
 8004ed0:	6139      	str	r1, [r7, #16]
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	414b      	adcs	r3, r1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	00cb      	lsls	r3, r1, #3
 8004ee8:	4651      	mov	r1, sl
 8004eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eee:	4651      	mov	r1, sl
 8004ef0:	00ca      	lsls	r2, r1, #3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4642      	mov	r2, r8
 8004efa:	189b      	adds	r3, r3, r2
 8004efc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f00:	464b      	mov	r3, r9
 8004f02:	460a      	mov	r2, r1
 8004f04:	eb42 0303 	adc.w	r3, r2, r3
 8004f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f24:	4649      	mov	r1, r9
 8004f26:	008b      	lsls	r3, r1, #2
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f2e:	4641      	mov	r1, r8
 8004f30:	008a      	lsls	r2, r1, #2
 8004f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f36:	f7fb f9a3 	bl	8000280 <__aeabi_uldivmod>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4b38      	ldr	r3, [pc, #224]	@ (8005024 <UART_SetConfig+0x4e4>)
 8004f42:	fba3 2301 	umull	r2, r3, r3, r1
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2264      	movs	r2, #100	@ 0x64
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	1acb      	subs	r3, r1, r3
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	3332      	adds	r3, #50	@ 0x32
 8004f54:	4a33      	ldr	r2, [pc, #204]	@ (8005024 <UART_SetConfig+0x4e4>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f60:	441c      	add	r4, r3
 8004f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f66:	2200      	movs	r2, #0
 8004f68:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	1891      	adds	r1, r2, r2
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	415b      	adcs	r3, r3
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f80:	4641      	mov	r1, r8
 8004f82:	1851      	adds	r1, r2, r1
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	4649      	mov	r1, r9
 8004f88:	414b      	adcs	r3, r1
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f98:	4659      	mov	r1, fp
 8004f9a:	00cb      	lsls	r3, r1, #3
 8004f9c:	4651      	mov	r1, sl
 8004f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa2:	4651      	mov	r1, sl
 8004fa4:	00ca      	lsls	r2, r1, #3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	4642      	mov	r2, r8
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	460a      	mov	r2, r1
 8004fb6:	eb42 0303 	adc.w	r3, r2, r3
 8004fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	008b      	lsls	r3, r1, #2
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fde:	4641      	mov	r1, r8
 8004fe0:	008a      	lsls	r2, r1, #2
 8004fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fe6:	f7fb f94b 	bl	8000280 <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <UART_SetConfig+0x4e4>)
 8004ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	2164      	movs	r1, #100	@ 0x64
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	3332      	adds	r3, #50	@ 0x32
 8005002:	4a08      	ldr	r2, [pc, #32]	@ (8005024 <UART_SetConfig+0x4e4>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	f003 020f 	and.w	r2, r3, #15
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4422      	add	r2, r4
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800501e:	46bd      	mov	sp, r7
 8005020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005024:	51eb851f 	.word	0x51eb851f

08005028 <siprintf>:
 8005028:	b40e      	push	{r1, r2, r3}
 800502a:	b500      	push	{lr}
 800502c:	b09c      	sub	sp, #112	@ 0x70
 800502e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005030:	9002      	str	r0, [sp, #8]
 8005032:	9006      	str	r0, [sp, #24]
 8005034:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005038:	4809      	ldr	r0, [pc, #36]	@ (8005060 <siprintf+0x38>)
 800503a:	9107      	str	r1, [sp, #28]
 800503c:	9104      	str	r1, [sp, #16]
 800503e:	4909      	ldr	r1, [pc, #36]	@ (8005064 <siprintf+0x3c>)
 8005040:	f853 2b04 	ldr.w	r2, [r3], #4
 8005044:	9105      	str	r1, [sp, #20]
 8005046:	6800      	ldr	r0, [r0, #0]
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	a902      	add	r1, sp, #8
 800504c:	f000 f9b4 	bl	80053b8 <_svfiprintf_r>
 8005050:	9b02      	ldr	r3, [sp, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	b01c      	add	sp, #112	@ 0x70
 8005058:	f85d eb04 	ldr.w	lr, [sp], #4
 800505c:	b003      	add	sp, #12
 800505e:	4770      	bx	lr
 8005060:	2000000c 	.word	0x2000000c
 8005064:	ffff0208 	.word	0xffff0208

08005068 <_vsiprintf_r>:
 8005068:	b500      	push	{lr}
 800506a:	b09b      	sub	sp, #108	@ 0x6c
 800506c:	9100      	str	r1, [sp, #0]
 800506e:	9104      	str	r1, [sp, #16]
 8005070:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005074:	9105      	str	r1, [sp, #20]
 8005076:	9102      	str	r1, [sp, #8]
 8005078:	4905      	ldr	r1, [pc, #20]	@ (8005090 <_vsiprintf_r+0x28>)
 800507a:	9103      	str	r1, [sp, #12]
 800507c:	4669      	mov	r1, sp
 800507e:	f000 f99b 	bl	80053b8 <_svfiprintf_r>
 8005082:	9b00      	ldr	r3, [sp, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	b01b      	add	sp, #108	@ 0x6c
 800508a:	f85d fb04 	ldr.w	pc, [sp], #4
 800508e:	bf00      	nop
 8005090:	ffff0208 	.word	0xffff0208

08005094 <vsiprintf>:
 8005094:	4613      	mov	r3, r2
 8005096:	460a      	mov	r2, r1
 8005098:	4601      	mov	r1, r0
 800509a:	4802      	ldr	r0, [pc, #8]	@ (80050a4 <vsiprintf+0x10>)
 800509c:	6800      	ldr	r0, [r0, #0]
 800509e:	f7ff bfe3 	b.w	8005068 <_vsiprintf_r>
 80050a2:	bf00      	nop
 80050a4:	2000000c 	.word	0x2000000c

080050a8 <memset>:
 80050a8:	4402      	add	r2, r0
 80050aa:	4603      	mov	r3, r0
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d100      	bne.n	80050b2 <memset+0xa>
 80050b0:	4770      	bx	lr
 80050b2:	f803 1b01 	strb.w	r1, [r3], #1
 80050b6:	e7f9      	b.n	80050ac <memset+0x4>

080050b8 <__errno>:
 80050b8:	4b01      	ldr	r3, [pc, #4]	@ (80050c0 <__errno+0x8>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	2000000c 	.word	0x2000000c

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4d0d      	ldr	r5, [pc, #52]	@ (80050fc <__libc_init_array+0x38>)
 80050c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005100 <__libc_init_array+0x3c>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	2600      	movs	r6, #0
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005104 <__libc_init_array+0x40>)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005108 <__libc_init_array+0x44>)
 80050d8:	f000 fc66 	bl	80059a8 <_init>
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	2600      	movs	r6, #0
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	08005a84 	.word	0x08005a84
 8005100:	08005a84 	.word	0x08005a84
 8005104:	08005a84 	.word	0x08005a84
 8005108:	08005a88 	.word	0x08005a88

0800510c <__retarget_lock_acquire_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_release_recursive>:
 800510e:	4770      	bx	lr

08005110 <_free_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4605      	mov	r5, r0
 8005114:	2900      	cmp	r1, #0
 8005116:	d041      	beq.n	800519c <_free_r+0x8c>
 8005118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800511c:	1f0c      	subs	r4, r1, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	bfb8      	it	lt
 8005122:	18e4      	addlt	r4, r4, r3
 8005124:	f000 f8e0 	bl	80052e8 <__malloc_lock>
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <_free_r+0x90>)
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	b933      	cbnz	r3, 800513c <_free_r+0x2c>
 800512e:	6063      	str	r3, [r4, #4]
 8005130:	6014      	str	r4, [r2, #0]
 8005132:	4628      	mov	r0, r5
 8005134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005138:	f000 b8dc 	b.w	80052f4 <__malloc_unlock>
 800513c:	42a3      	cmp	r3, r4
 800513e:	d908      	bls.n	8005152 <_free_r+0x42>
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	1821      	adds	r1, r4, r0
 8005144:	428b      	cmp	r3, r1
 8005146:	bf01      	itttt	eq
 8005148:	6819      	ldreq	r1, [r3, #0]
 800514a:	685b      	ldreq	r3, [r3, #4]
 800514c:	1809      	addeq	r1, r1, r0
 800514e:	6021      	streq	r1, [r4, #0]
 8005150:	e7ed      	b.n	800512e <_free_r+0x1e>
 8005152:	461a      	mov	r2, r3
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b10b      	cbz	r3, 800515c <_free_r+0x4c>
 8005158:	42a3      	cmp	r3, r4
 800515a:	d9fa      	bls.n	8005152 <_free_r+0x42>
 800515c:	6811      	ldr	r1, [r2, #0]
 800515e:	1850      	adds	r0, r2, r1
 8005160:	42a0      	cmp	r0, r4
 8005162:	d10b      	bne.n	800517c <_free_r+0x6c>
 8005164:	6820      	ldr	r0, [r4, #0]
 8005166:	4401      	add	r1, r0
 8005168:	1850      	adds	r0, r2, r1
 800516a:	4283      	cmp	r3, r0
 800516c:	6011      	str	r1, [r2, #0]
 800516e:	d1e0      	bne.n	8005132 <_free_r+0x22>
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	6053      	str	r3, [r2, #4]
 8005176:	4408      	add	r0, r1
 8005178:	6010      	str	r0, [r2, #0]
 800517a:	e7da      	b.n	8005132 <_free_r+0x22>
 800517c:	d902      	bls.n	8005184 <_free_r+0x74>
 800517e:	230c      	movs	r3, #12
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	e7d6      	b.n	8005132 <_free_r+0x22>
 8005184:	6820      	ldr	r0, [r4, #0]
 8005186:	1821      	adds	r1, r4, r0
 8005188:	428b      	cmp	r3, r1
 800518a:	bf04      	itt	eq
 800518c:	6819      	ldreq	r1, [r3, #0]
 800518e:	685b      	ldreq	r3, [r3, #4]
 8005190:	6063      	str	r3, [r4, #4]
 8005192:	bf04      	itt	eq
 8005194:	1809      	addeq	r1, r1, r0
 8005196:	6021      	streq	r1, [r4, #0]
 8005198:	6054      	str	r4, [r2, #4]
 800519a:	e7ca      	b.n	8005132 <_free_r+0x22>
 800519c:	bd38      	pop	{r3, r4, r5, pc}
 800519e:	bf00      	nop
 80051a0:	20000300 	.word	0x20000300

080051a4 <sbrk_aligned>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	4e0f      	ldr	r6, [pc, #60]	@ (80051e4 <sbrk_aligned+0x40>)
 80051a8:	460c      	mov	r4, r1
 80051aa:	6831      	ldr	r1, [r6, #0]
 80051ac:	4605      	mov	r5, r0
 80051ae:	b911      	cbnz	r1, 80051b6 <sbrk_aligned+0x12>
 80051b0:	f000 fba6 	bl	8005900 <_sbrk_r>
 80051b4:	6030      	str	r0, [r6, #0]
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 fba1 	bl	8005900 <_sbrk_r>
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	d103      	bne.n	80051ca <sbrk_aligned+0x26>
 80051c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80051c6:	4620      	mov	r0, r4
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
 80051ca:	1cc4      	adds	r4, r0, #3
 80051cc:	f024 0403 	bic.w	r4, r4, #3
 80051d0:	42a0      	cmp	r0, r4
 80051d2:	d0f8      	beq.n	80051c6 <sbrk_aligned+0x22>
 80051d4:	1a21      	subs	r1, r4, r0
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 fb92 	bl	8005900 <_sbrk_r>
 80051dc:	3001      	adds	r0, #1
 80051de:	d1f2      	bne.n	80051c6 <sbrk_aligned+0x22>
 80051e0:	e7ef      	b.n	80051c2 <sbrk_aligned+0x1e>
 80051e2:	bf00      	nop
 80051e4:	200002fc 	.word	0x200002fc

080051e8 <_malloc_r>:
 80051e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ec:	1ccd      	adds	r5, r1, #3
 80051ee:	f025 0503 	bic.w	r5, r5, #3
 80051f2:	3508      	adds	r5, #8
 80051f4:	2d0c      	cmp	r5, #12
 80051f6:	bf38      	it	cc
 80051f8:	250c      	movcc	r5, #12
 80051fa:	2d00      	cmp	r5, #0
 80051fc:	4606      	mov	r6, r0
 80051fe:	db01      	blt.n	8005204 <_malloc_r+0x1c>
 8005200:	42a9      	cmp	r1, r5
 8005202:	d904      	bls.n	800520e <_malloc_r+0x26>
 8005204:	230c      	movs	r3, #12
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	2000      	movs	r0, #0
 800520a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800520e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052e4 <_malloc_r+0xfc>
 8005212:	f000 f869 	bl	80052e8 <__malloc_lock>
 8005216:	f8d8 3000 	ldr.w	r3, [r8]
 800521a:	461c      	mov	r4, r3
 800521c:	bb44      	cbnz	r4, 8005270 <_malloc_r+0x88>
 800521e:	4629      	mov	r1, r5
 8005220:	4630      	mov	r0, r6
 8005222:	f7ff ffbf 	bl	80051a4 <sbrk_aligned>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	4604      	mov	r4, r0
 800522a:	d158      	bne.n	80052de <_malloc_r+0xf6>
 800522c:	f8d8 4000 	ldr.w	r4, [r8]
 8005230:	4627      	mov	r7, r4
 8005232:	2f00      	cmp	r7, #0
 8005234:	d143      	bne.n	80052be <_malloc_r+0xd6>
 8005236:	2c00      	cmp	r4, #0
 8005238:	d04b      	beq.n	80052d2 <_malloc_r+0xea>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	4639      	mov	r1, r7
 800523e:	4630      	mov	r0, r6
 8005240:	eb04 0903 	add.w	r9, r4, r3
 8005244:	f000 fb5c 	bl	8005900 <_sbrk_r>
 8005248:	4581      	cmp	r9, r0
 800524a:	d142      	bne.n	80052d2 <_malloc_r+0xea>
 800524c:	6821      	ldr	r1, [r4, #0]
 800524e:	1a6d      	subs	r5, r5, r1
 8005250:	4629      	mov	r1, r5
 8005252:	4630      	mov	r0, r6
 8005254:	f7ff ffa6 	bl	80051a4 <sbrk_aligned>
 8005258:	3001      	adds	r0, #1
 800525a:	d03a      	beq.n	80052d2 <_malloc_r+0xea>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	442b      	add	r3, r5
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	f8d8 3000 	ldr.w	r3, [r8]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	bb62      	cbnz	r2, 80052c4 <_malloc_r+0xdc>
 800526a:	f8c8 7000 	str.w	r7, [r8]
 800526e:	e00f      	b.n	8005290 <_malloc_r+0xa8>
 8005270:	6822      	ldr	r2, [r4, #0]
 8005272:	1b52      	subs	r2, r2, r5
 8005274:	d420      	bmi.n	80052b8 <_malloc_r+0xd0>
 8005276:	2a0b      	cmp	r2, #11
 8005278:	d917      	bls.n	80052aa <_malloc_r+0xc2>
 800527a:	1961      	adds	r1, r4, r5
 800527c:	42a3      	cmp	r3, r4
 800527e:	6025      	str	r5, [r4, #0]
 8005280:	bf18      	it	ne
 8005282:	6059      	strne	r1, [r3, #4]
 8005284:	6863      	ldr	r3, [r4, #4]
 8005286:	bf08      	it	eq
 8005288:	f8c8 1000 	streq.w	r1, [r8]
 800528c:	5162      	str	r2, [r4, r5]
 800528e:	604b      	str	r3, [r1, #4]
 8005290:	4630      	mov	r0, r6
 8005292:	f000 f82f 	bl	80052f4 <__malloc_unlock>
 8005296:	f104 000b 	add.w	r0, r4, #11
 800529a:	1d23      	adds	r3, r4, #4
 800529c:	f020 0007 	bic.w	r0, r0, #7
 80052a0:	1ac2      	subs	r2, r0, r3
 80052a2:	bf1c      	itt	ne
 80052a4:	1a1b      	subne	r3, r3, r0
 80052a6:	50a3      	strne	r3, [r4, r2]
 80052a8:	e7af      	b.n	800520a <_malloc_r+0x22>
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	bf0c      	ite	eq
 80052b0:	f8c8 2000 	streq.w	r2, [r8]
 80052b4:	605a      	strne	r2, [r3, #4]
 80052b6:	e7eb      	b.n	8005290 <_malloc_r+0xa8>
 80052b8:	4623      	mov	r3, r4
 80052ba:	6864      	ldr	r4, [r4, #4]
 80052bc:	e7ae      	b.n	800521c <_malloc_r+0x34>
 80052be:	463c      	mov	r4, r7
 80052c0:	687f      	ldr	r7, [r7, #4]
 80052c2:	e7b6      	b.n	8005232 <_malloc_r+0x4a>
 80052c4:	461a      	mov	r2, r3
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	d1fb      	bne.n	80052c4 <_malloc_r+0xdc>
 80052cc:	2300      	movs	r3, #0
 80052ce:	6053      	str	r3, [r2, #4]
 80052d0:	e7de      	b.n	8005290 <_malloc_r+0xa8>
 80052d2:	230c      	movs	r3, #12
 80052d4:	6033      	str	r3, [r6, #0]
 80052d6:	4630      	mov	r0, r6
 80052d8:	f000 f80c 	bl	80052f4 <__malloc_unlock>
 80052dc:	e794      	b.n	8005208 <_malloc_r+0x20>
 80052de:	6005      	str	r5, [r0, #0]
 80052e0:	e7d6      	b.n	8005290 <_malloc_r+0xa8>
 80052e2:	bf00      	nop
 80052e4:	20000300 	.word	0x20000300

080052e8 <__malloc_lock>:
 80052e8:	4801      	ldr	r0, [pc, #4]	@ (80052f0 <__malloc_lock+0x8>)
 80052ea:	f7ff bf0f 	b.w	800510c <__retarget_lock_acquire_recursive>
 80052ee:	bf00      	nop
 80052f0:	200002f8 	.word	0x200002f8

080052f4 <__malloc_unlock>:
 80052f4:	4801      	ldr	r0, [pc, #4]	@ (80052fc <__malloc_unlock+0x8>)
 80052f6:	f7ff bf0a 	b.w	800510e <__retarget_lock_release_recursive>
 80052fa:	bf00      	nop
 80052fc:	200002f8 	.word	0x200002f8

08005300 <__ssputs_r>:
 8005300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	688e      	ldr	r6, [r1, #8]
 8005306:	461f      	mov	r7, r3
 8005308:	42be      	cmp	r6, r7
 800530a:	680b      	ldr	r3, [r1, #0]
 800530c:	4682      	mov	sl, r0
 800530e:	460c      	mov	r4, r1
 8005310:	4690      	mov	r8, r2
 8005312:	d82d      	bhi.n	8005370 <__ssputs_r+0x70>
 8005314:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005318:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800531c:	d026      	beq.n	800536c <__ssputs_r+0x6c>
 800531e:	6965      	ldr	r5, [r4, #20]
 8005320:	6909      	ldr	r1, [r1, #16]
 8005322:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005326:	eba3 0901 	sub.w	r9, r3, r1
 800532a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800532e:	1c7b      	adds	r3, r7, #1
 8005330:	444b      	add	r3, r9
 8005332:	106d      	asrs	r5, r5, #1
 8005334:	429d      	cmp	r5, r3
 8005336:	bf38      	it	cc
 8005338:	461d      	movcc	r5, r3
 800533a:	0553      	lsls	r3, r2, #21
 800533c:	d527      	bpl.n	800538e <__ssputs_r+0x8e>
 800533e:	4629      	mov	r1, r5
 8005340:	f7ff ff52 	bl	80051e8 <_malloc_r>
 8005344:	4606      	mov	r6, r0
 8005346:	b360      	cbz	r0, 80053a2 <__ssputs_r+0xa2>
 8005348:	6921      	ldr	r1, [r4, #16]
 800534a:	464a      	mov	r2, r9
 800534c:	f000 fae8 	bl	8005920 <memcpy>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	6126      	str	r6, [r4, #16]
 800535e:	6165      	str	r5, [r4, #20]
 8005360:	444e      	add	r6, r9
 8005362:	eba5 0509 	sub.w	r5, r5, r9
 8005366:	6026      	str	r6, [r4, #0]
 8005368:	60a5      	str	r5, [r4, #8]
 800536a:	463e      	mov	r6, r7
 800536c:	42be      	cmp	r6, r7
 800536e:	d900      	bls.n	8005372 <__ssputs_r+0x72>
 8005370:	463e      	mov	r6, r7
 8005372:	6820      	ldr	r0, [r4, #0]
 8005374:	4632      	mov	r2, r6
 8005376:	4641      	mov	r1, r8
 8005378:	f000 faa8 	bl	80058cc <memmove>
 800537c:	68a3      	ldr	r3, [r4, #8]
 800537e:	1b9b      	subs	r3, r3, r6
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	4433      	add	r3, r6
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	2000      	movs	r0, #0
 800538a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538e:	462a      	mov	r2, r5
 8005390:	f000 fad4 	bl	800593c <_realloc_r>
 8005394:	4606      	mov	r6, r0
 8005396:	2800      	cmp	r0, #0
 8005398:	d1e0      	bne.n	800535c <__ssputs_r+0x5c>
 800539a:	6921      	ldr	r1, [r4, #16]
 800539c:	4650      	mov	r0, sl
 800539e:	f7ff feb7 	bl	8005110 <_free_r>
 80053a2:	230c      	movs	r3, #12
 80053a4:	f8ca 3000 	str.w	r3, [sl]
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ae:	81a3      	strh	r3, [r4, #12]
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053b4:	e7e9      	b.n	800538a <__ssputs_r+0x8a>
	...

080053b8 <_svfiprintf_r>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	4698      	mov	r8, r3
 80053be:	898b      	ldrh	r3, [r1, #12]
 80053c0:	061b      	lsls	r3, r3, #24
 80053c2:	b09d      	sub	sp, #116	@ 0x74
 80053c4:	4607      	mov	r7, r0
 80053c6:	460d      	mov	r5, r1
 80053c8:	4614      	mov	r4, r2
 80053ca:	d510      	bpl.n	80053ee <_svfiprintf_r+0x36>
 80053cc:	690b      	ldr	r3, [r1, #16]
 80053ce:	b973      	cbnz	r3, 80053ee <_svfiprintf_r+0x36>
 80053d0:	2140      	movs	r1, #64	@ 0x40
 80053d2:	f7ff ff09 	bl	80051e8 <_malloc_r>
 80053d6:	6028      	str	r0, [r5, #0]
 80053d8:	6128      	str	r0, [r5, #16]
 80053da:	b930      	cbnz	r0, 80053ea <_svfiprintf_r+0x32>
 80053dc:	230c      	movs	r3, #12
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053e4:	b01d      	add	sp, #116	@ 0x74
 80053e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ea:	2340      	movs	r3, #64	@ 0x40
 80053ec:	616b      	str	r3, [r5, #20]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80053f2:	2320      	movs	r3, #32
 80053f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80053fc:	2330      	movs	r3, #48	@ 0x30
 80053fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800559c <_svfiprintf_r+0x1e4>
 8005402:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005406:	f04f 0901 	mov.w	r9, #1
 800540a:	4623      	mov	r3, r4
 800540c:	469a      	mov	sl, r3
 800540e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005412:	b10a      	cbz	r2, 8005418 <_svfiprintf_r+0x60>
 8005414:	2a25      	cmp	r2, #37	@ 0x25
 8005416:	d1f9      	bne.n	800540c <_svfiprintf_r+0x54>
 8005418:	ebba 0b04 	subs.w	fp, sl, r4
 800541c:	d00b      	beq.n	8005436 <_svfiprintf_r+0x7e>
 800541e:	465b      	mov	r3, fp
 8005420:	4622      	mov	r2, r4
 8005422:	4629      	mov	r1, r5
 8005424:	4638      	mov	r0, r7
 8005426:	f7ff ff6b 	bl	8005300 <__ssputs_r>
 800542a:	3001      	adds	r0, #1
 800542c:	f000 80a7 	beq.w	800557e <_svfiprintf_r+0x1c6>
 8005430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005432:	445a      	add	r2, fp
 8005434:	9209      	str	r2, [sp, #36]	@ 0x24
 8005436:	f89a 3000 	ldrb.w	r3, [sl]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 809f 	beq.w	800557e <_svfiprintf_r+0x1c6>
 8005440:	2300      	movs	r3, #0
 8005442:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800544a:	f10a 0a01 	add.w	sl, sl, #1
 800544e:	9304      	str	r3, [sp, #16]
 8005450:	9307      	str	r3, [sp, #28]
 8005452:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005456:	931a      	str	r3, [sp, #104]	@ 0x68
 8005458:	4654      	mov	r4, sl
 800545a:	2205      	movs	r2, #5
 800545c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005460:	484e      	ldr	r0, [pc, #312]	@ (800559c <_svfiprintf_r+0x1e4>)
 8005462:	f7fa febd 	bl	80001e0 <memchr>
 8005466:	9a04      	ldr	r2, [sp, #16]
 8005468:	b9d8      	cbnz	r0, 80054a2 <_svfiprintf_r+0xea>
 800546a:	06d0      	lsls	r0, r2, #27
 800546c:	bf44      	itt	mi
 800546e:	2320      	movmi	r3, #32
 8005470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005474:	0711      	lsls	r1, r2, #28
 8005476:	bf44      	itt	mi
 8005478:	232b      	movmi	r3, #43	@ 0x2b
 800547a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800547e:	f89a 3000 	ldrb.w	r3, [sl]
 8005482:	2b2a      	cmp	r3, #42	@ 0x2a
 8005484:	d015      	beq.n	80054b2 <_svfiprintf_r+0xfa>
 8005486:	9a07      	ldr	r2, [sp, #28]
 8005488:	4654      	mov	r4, sl
 800548a:	2000      	movs	r0, #0
 800548c:	f04f 0c0a 	mov.w	ip, #10
 8005490:	4621      	mov	r1, r4
 8005492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005496:	3b30      	subs	r3, #48	@ 0x30
 8005498:	2b09      	cmp	r3, #9
 800549a:	d94b      	bls.n	8005534 <_svfiprintf_r+0x17c>
 800549c:	b1b0      	cbz	r0, 80054cc <_svfiprintf_r+0x114>
 800549e:	9207      	str	r2, [sp, #28]
 80054a0:	e014      	b.n	80054cc <_svfiprintf_r+0x114>
 80054a2:	eba0 0308 	sub.w	r3, r0, r8
 80054a6:	fa09 f303 	lsl.w	r3, r9, r3
 80054aa:	4313      	orrs	r3, r2
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	46a2      	mov	sl, r4
 80054b0:	e7d2      	b.n	8005458 <_svfiprintf_r+0xa0>
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	1d19      	adds	r1, r3, #4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	9103      	str	r1, [sp, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfbb      	ittet	lt
 80054be:	425b      	neglt	r3, r3
 80054c0:	f042 0202 	orrlt.w	r2, r2, #2
 80054c4:	9307      	strge	r3, [sp, #28]
 80054c6:	9307      	strlt	r3, [sp, #28]
 80054c8:	bfb8      	it	lt
 80054ca:	9204      	strlt	r2, [sp, #16]
 80054cc:	7823      	ldrb	r3, [r4, #0]
 80054ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80054d0:	d10a      	bne.n	80054e8 <_svfiprintf_r+0x130>
 80054d2:	7863      	ldrb	r3, [r4, #1]
 80054d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80054d6:	d132      	bne.n	800553e <_svfiprintf_r+0x186>
 80054d8:	9b03      	ldr	r3, [sp, #12]
 80054da:	1d1a      	adds	r2, r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	9203      	str	r2, [sp, #12]
 80054e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054e4:	3402      	adds	r4, #2
 80054e6:	9305      	str	r3, [sp, #20]
 80054e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80055ac <_svfiprintf_r+0x1f4>
 80054ec:	7821      	ldrb	r1, [r4, #0]
 80054ee:	2203      	movs	r2, #3
 80054f0:	4650      	mov	r0, sl
 80054f2:	f7fa fe75 	bl	80001e0 <memchr>
 80054f6:	b138      	cbz	r0, 8005508 <_svfiprintf_r+0x150>
 80054f8:	9b04      	ldr	r3, [sp, #16]
 80054fa:	eba0 000a 	sub.w	r0, r0, sl
 80054fe:	2240      	movs	r2, #64	@ 0x40
 8005500:	4082      	lsls	r2, r0
 8005502:	4313      	orrs	r3, r2
 8005504:	3401      	adds	r4, #1
 8005506:	9304      	str	r3, [sp, #16]
 8005508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800550c:	4824      	ldr	r0, [pc, #144]	@ (80055a0 <_svfiprintf_r+0x1e8>)
 800550e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005512:	2206      	movs	r2, #6
 8005514:	f7fa fe64 	bl	80001e0 <memchr>
 8005518:	2800      	cmp	r0, #0
 800551a:	d036      	beq.n	800558a <_svfiprintf_r+0x1d2>
 800551c:	4b21      	ldr	r3, [pc, #132]	@ (80055a4 <_svfiprintf_r+0x1ec>)
 800551e:	bb1b      	cbnz	r3, 8005568 <_svfiprintf_r+0x1b0>
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	3307      	adds	r3, #7
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	3308      	adds	r3, #8
 800552a:	9303      	str	r3, [sp, #12]
 800552c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800552e:	4433      	add	r3, r6
 8005530:	9309      	str	r3, [sp, #36]	@ 0x24
 8005532:	e76a      	b.n	800540a <_svfiprintf_r+0x52>
 8005534:	fb0c 3202 	mla	r2, ip, r2, r3
 8005538:	460c      	mov	r4, r1
 800553a:	2001      	movs	r0, #1
 800553c:	e7a8      	b.n	8005490 <_svfiprintf_r+0xd8>
 800553e:	2300      	movs	r3, #0
 8005540:	3401      	adds	r4, #1
 8005542:	9305      	str	r3, [sp, #20]
 8005544:	4619      	mov	r1, r3
 8005546:	f04f 0c0a 	mov.w	ip, #10
 800554a:	4620      	mov	r0, r4
 800554c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005550:	3a30      	subs	r2, #48	@ 0x30
 8005552:	2a09      	cmp	r2, #9
 8005554:	d903      	bls.n	800555e <_svfiprintf_r+0x1a6>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0c6      	beq.n	80054e8 <_svfiprintf_r+0x130>
 800555a:	9105      	str	r1, [sp, #20]
 800555c:	e7c4      	b.n	80054e8 <_svfiprintf_r+0x130>
 800555e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005562:	4604      	mov	r4, r0
 8005564:	2301      	movs	r3, #1
 8005566:	e7f0      	b.n	800554a <_svfiprintf_r+0x192>
 8005568:	ab03      	add	r3, sp, #12
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	462a      	mov	r2, r5
 800556e:	4b0e      	ldr	r3, [pc, #56]	@ (80055a8 <_svfiprintf_r+0x1f0>)
 8005570:	a904      	add	r1, sp, #16
 8005572:	4638      	mov	r0, r7
 8005574:	f3af 8000 	nop.w
 8005578:	1c42      	adds	r2, r0, #1
 800557a:	4606      	mov	r6, r0
 800557c:	d1d6      	bne.n	800552c <_svfiprintf_r+0x174>
 800557e:	89ab      	ldrh	r3, [r5, #12]
 8005580:	065b      	lsls	r3, r3, #25
 8005582:	f53f af2d 	bmi.w	80053e0 <_svfiprintf_r+0x28>
 8005586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005588:	e72c      	b.n	80053e4 <_svfiprintf_r+0x2c>
 800558a:	ab03      	add	r3, sp, #12
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	462a      	mov	r2, r5
 8005590:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <_svfiprintf_r+0x1f0>)
 8005592:	a904      	add	r1, sp, #16
 8005594:	4638      	mov	r0, r7
 8005596:	f000 f879 	bl	800568c <_printf_i>
 800559a:	e7ed      	b.n	8005578 <_svfiprintf_r+0x1c0>
 800559c:	08005a48 	.word	0x08005a48
 80055a0:	08005a52 	.word	0x08005a52
 80055a4:	00000000 	.word	0x00000000
 80055a8:	08005301 	.word	0x08005301
 80055ac:	08005a4e 	.word	0x08005a4e

080055b0 <_printf_common>:
 80055b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b4:	4616      	mov	r6, r2
 80055b6:	4698      	mov	r8, r3
 80055b8:	688a      	ldr	r2, [r1, #8]
 80055ba:	690b      	ldr	r3, [r1, #16]
 80055bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055c0:	4293      	cmp	r3, r2
 80055c2:	bfb8      	it	lt
 80055c4:	4613      	movlt	r3, r2
 80055c6:	6033      	str	r3, [r6, #0]
 80055c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055cc:	4607      	mov	r7, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	b10a      	cbz	r2, 80055d6 <_printf_common+0x26>
 80055d2:	3301      	adds	r3, #1
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	0699      	lsls	r1, r3, #26
 80055da:	bf42      	ittt	mi
 80055dc:	6833      	ldrmi	r3, [r6, #0]
 80055de:	3302      	addmi	r3, #2
 80055e0:	6033      	strmi	r3, [r6, #0]
 80055e2:	6825      	ldr	r5, [r4, #0]
 80055e4:	f015 0506 	ands.w	r5, r5, #6
 80055e8:	d106      	bne.n	80055f8 <_printf_common+0x48>
 80055ea:	f104 0a19 	add.w	sl, r4, #25
 80055ee:	68e3      	ldr	r3, [r4, #12]
 80055f0:	6832      	ldr	r2, [r6, #0]
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	42ab      	cmp	r3, r5
 80055f6:	dc26      	bgt.n	8005646 <_printf_common+0x96>
 80055f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	3b00      	subs	r3, #0
 8005600:	bf18      	it	ne
 8005602:	2301      	movne	r3, #1
 8005604:	0692      	lsls	r2, r2, #26
 8005606:	d42b      	bmi.n	8005660 <_printf_common+0xb0>
 8005608:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800560c:	4641      	mov	r1, r8
 800560e:	4638      	mov	r0, r7
 8005610:	47c8      	blx	r9
 8005612:	3001      	adds	r0, #1
 8005614:	d01e      	beq.n	8005654 <_printf_common+0xa4>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	6922      	ldr	r2, [r4, #16]
 800561a:	f003 0306 	and.w	r3, r3, #6
 800561e:	2b04      	cmp	r3, #4
 8005620:	bf02      	ittt	eq
 8005622:	68e5      	ldreq	r5, [r4, #12]
 8005624:	6833      	ldreq	r3, [r6, #0]
 8005626:	1aed      	subeq	r5, r5, r3
 8005628:	68a3      	ldr	r3, [r4, #8]
 800562a:	bf0c      	ite	eq
 800562c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005630:	2500      	movne	r5, #0
 8005632:	4293      	cmp	r3, r2
 8005634:	bfc4      	itt	gt
 8005636:	1a9b      	subgt	r3, r3, r2
 8005638:	18ed      	addgt	r5, r5, r3
 800563a:	2600      	movs	r6, #0
 800563c:	341a      	adds	r4, #26
 800563e:	42b5      	cmp	r5, r6
 8005640:	d11a      	bne.n	8005678 <_printf_common+0xc8>
 8005642:	2000      	movs	r0, #0
 8005644:	e008      	b.n	8005658 <_printf_common+0xa8>
 8005646:	2301      	movs	r3, #1
 8005648:	4652      	mov	r2, sl
 800564a:	4641      	mov	r1, r8
 800564c:	4638      	mov	r0, r7
 800564e:	47c8      	blx	r9
 8005650:	3001      	adds	r0, #1
 8005652:	d103      	bne.n	800565c <_printf_common+0xac>
 8005654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565c:	3501      	adds	r5, #1
 800565e:	e7c6      	b.n	80055ee <_printf_common+0x3e>
 8005660:	18e1      	adds	r1, r4, r3
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	2030      	movs	r0, #48	@ 0x30
 8005666:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800566a:	4422      	add	r2, r4
 800566c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005670:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005674:	3302      	adds	r3, #2
 8005676:	e7c7      	b.n	8005608 <_printf_common+0x58>
 8005678:	2301      	movs	r3, #1
 800567a:	4622      	mov	r2, r4
 800567c:	4641      	mov	r1, r8
 800567e:	4638      	mov	r0, r7
 8005680:	47c8      	blx	r9
 8005682:	3001      	adds	r0, #1
 8005684:	d0e6      	beq.n	8005654 <_printf_common+0xa4>
 8005686:	3601      	adds	r6, #1
 8005688:	e7d9      	b.n	800563e <_printf_common+0x8e>
	...

0800568c <_printf_i>:
 800568c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005690:	7e0f      	ldrb	r7, [r1, #24]
 8005692:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005694:	2f78      	cmp	r7, #120	@ 0x78
 8005696:	4691      	mov	r9, r2
 8005698:	4680      	mov	r8, r0
 800569a:	460c      	mov	r4, r1
 800569c:	469a      	mov	sl, r3
 800569e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056a2:	d807      	bhi.n	80056b4 <_printf_i+0x28>
 80056a4:	2f62      	cmp	r7, #98	@ 0x62
 80056a6:	d80a      	bhi.n	80056be <_printf_i+0x32>
 80056a8:	2f00      	cmp	r7, #0
 80056aa:	f000 80d2 	beq.w	8005852 <_printf_i+0x1c6>
 80056ae:	2f58      	cmp	r7, #88	@ 0x58
 80056b0:	f000 80b9 	beq.w	8005826 <_printf_i+0x19a>
 80056b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056bc:	e03a      	b.n	8005734 <_printf_i+0xa8>
 80056be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056c2:	2b15      	cmp	r3, #21
 80056c4:	d8f6      	bhi.n	80056b4 <_printf_i+0x28>
 80056c6:	a101      	add	r1, pc, #4	@ (adr r1, 80056cc <_printf_i+0x40>)
 80056c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056cc:	08005725 	.word	0x08005725
 80056d0:	08005739 	.word	0x08005739
 80056d4:	080056b5 	.word	0x080056b5
 80056d8:	080056b5 	.word	0x080056b5
 80056dc:	080056b5 	.word	0x080056b5
 80056e0:	080056b5 	.word	0x080056b5
 80056e4:	08005739 	.word	0x08005739
 80056e8:	080056b5 	.word	0x080056b5
 80056ec:	080056b5 	.word	0x080056b5
 80056f0:	080056b5 	.word	0x080056b5
 80056f4:	080056b5 	.word	0x080056b5
 80056f8:	08005839 	.word	0x08005839
 80056fc:	08005763 	.word	0x08005763
 8005700:	080057f3 	.word	0x080057f3
 8005704:	080056b5 	.word	0x080056b5
 8005708:	080056b5 	.word	0x080056b5
 800570c:	0800585b 	.word	0x0800585b
 8005710:	080056b5 	.word	0x080056b5
 8005714:	08005763 	.word	0x08005763
 8005718:	080056b5 	.word	0x080056b5
 800571c:	080056b5 	.word	0x080056b5
 8005720:	080057fb 	.word	0x080057fb
 8005724:	6833      	ldr	r3, [r6, #0]
 8005726:	1d1a      	adds	r2, r3, #4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6032      	str	r2, [r6, #0]
 800572c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005730:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005734:	2301      	movs	r3, #1
 8005736:	e09d      	b.n	8005874 <_printf_i+0x1e8>
 8005738:	6833      	ldr	r3, [r6, #0]
 800573a:	6820      	ldr	r0, [r4, #0]
 800573c:	1d19      	adds	r1, r3, #4
 800573e:	6031      	str	r1, [r6, #0]
 8005740:	0606      	lsls	r6, r0, #24
 8005742:	d501      	bpl.n	8005748 <_printf_i+0xbc>
 8005744:	681d      	ldr	r5, [r3, #0]
 8005746:	e003      	b.n	8005750 <_printf_i+0xc4>
 8005748:	0645      	lsls	r5, r0, #25
 800574a:	d5fb      	bpl.n	8005744 <_printf_i+0xb8>
 800574c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005750:	2d00      	cmp	r5, #0
 8005752:	da03      	bge.n	800575c <_printf_i+0xd0>
 8005754:	232d      	movs	r3, #45	@ 0x2d
 8005756:	426d      	negs	r5, r5
 8005758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800575c:	4859      	ldr	r0, [pc, #356]	@ (80058c4 <_printf_i+0x238>)
 800575e:	230a      	movs	r3, #10
 8005760:	e011      	b.n	8005786 <_printf_i+0xfa>
 8005762:	6821      	ldr	r1, [r4, #0]
 8005764:	6833      	ldr	r3, [r6, #0]
 8005766:	0608      	lsls	r0, r1, #24
 8005768:	f853 5b04 	ldr.w	r5, [r3], #4
 800576c:	d402      	bmi.n	8005774 <_printf_i+0xe8>
 800576e:	0649      	lsls	r1, r1, #25
 8005770:	bf48      	it	mi
 8005772:	b2ad      	uxthmi	r5, r5
 8005774:	2f6f      	cmp	r7, #111	@ 0x6f
 8005776:	4853      	ldr	r0, [pc, #332]	@ (80058c4 <_printf_i+0x238>)
 8005778:	6033      	str	r3, [r6, #0]
 800577a:	bf14      	ite	ne
 800577c:	230a      	movne	r3, #10
 800577e:	2308      	moveq	r3, #8
 8005780:	2100      	movs	r1, #0
 8005782:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005786:	6866      	ldr	r6, [r4, #4]
 8005788:	60a6      	str	r6, [r4, #8]
 800578a:	2e00      	cmp	r6, #0
 800578c:	bfa2      	ittt	ge
 800578e:	6821      	ldrge	r1, [r4, #0]
 8005790:	f021 0104 	bicge.w	r1, r1, #4
 8005794:	6021      	strge	r1, [r4, #0]
 8005796:	b90d      	cbnz	r5, 800579c <_printf_i+0x110>
 8005798:	2e00      	cmp	r6, #0
 800579a:	d04b      	beq.n	8005834 <_printf_i+0x1a8>
 800579c:	4616      	mov	r6, r2
 800579e:	fbb5 f1f3 	udiv	r1, r5, r3
 80057a2:	fb03 5711 	mls	r7, r3, r1, r5
 80057a6:	5dc7      	ldrb	r7, [r0, r7]
 80057a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057ac:	462f      	mov	r7, r5
 80057ae:	42bb      	cmp	r3, r7
 80057b0:	460d      	mov	r5, r1
 80057b2:	d9f4      	bls.n	800579e <_printf_i+0x112>
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d10b      	bne.n	80057d0 <_printf_i+0x144>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	07df      	lsls	r7, r3, #31
 80057bc:	d508      	bpl.n	80057d0 <_printf_i+0x144>
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	6861      	ldr	r1, [r4, #4]
 80057c2:	4299      	cmp	r1, r3
 80057c4:	bfde      	ittt	le
 80057c6:	2330      	movle	r3, #48	@ 0x30
 80057c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057cc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80057d0:	1b92      	subs	r2, r2, r6
 80057d2:	6122      	str	r2, [r4, #16]
 80057d4:	f8cd a000 	str.w	sl, [sp]
 80057d8:	464b      	mov	r3, r9
 80057da:	aa03      	add	r2, sp, #12
 80057dc:	4621      	mov	r1, r4
 80057de:	4640      	mov	r0, r8
 80057e0:	f7ff fee6 	bl	80055b0 <_printf_common>
 80057e4:	3001      	adds	r0, #1
 80057e6:	d14a      	bne.n	800587e <_printf_i+0x1f2>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057ec:	b004      	add	sp, #16
 80057ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	f043 0320 	orr.w	r3, r3, #32
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	4833      	ldr	r0, [pc, #204]	@ (80058c8 <_printf_i+0x23c>)
 80057fc:	2778      	movs	r7, #120	@ 0x78
 80057fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	6831      	ldr	r1, [r6, #0]
 8005806:	061f      	lsls	r7, r3, #24
 8005808:	f851 5b04 	ldr.w	r5, [r1], #4
 800580c:	d402      	bmi.n	8005814 <_printf_i+0x188>
 800580e:	065f      	lsls	r7, r3, #25
 8005810:	bf48      	it	mi
 8005812:	b2ad      	uxthmi	r5, r5
 8005814:	6031      	str	r1, [r6, #0]
 8005816:	07d9      	lsls	r1, r3, #31
 8005818:	bf44      	itt	mi
 800581a:	f043 0320 	orrmi.w	r3, r3, #32
 800581e:	6023      	strmi	r3, [r4, #0]
 8005820:	b11d      	cbz	r5, 800582a <_printf_i+0x19e>
 8005822:	2310      	movs	r3, #16
 8005824:	e7ac      	b.n	8005780 <_printf_i+0xf4>
 8005826:	4827      	ldr	r0, [pc, #156]	@ (80058c4 <_printf_i+0x238>)
 8005828:	e7e9      	b.n	80057fe <_printf_i+0x172>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	f023 0320 	bic.w	r3, r3, #32
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	e7f6      	b.n	8005822 <_printf_i+0x196>
 8005834:	4616      	mov	r6, r2
 8005836:	e7bd      	b.n	80057b4 <_printf_i+0x128>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	6961      	ldr	r1, [r4, #20]
 800583e:	1d18      	adds	r0, r3, #4
 8005840:	6030      	str	r0, [r6, #0]
 8005842:	062e      	lsls	r6, r5, #24
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	d501      	bpl.n	800584c <_printf_i+0x1c0>
 8005848:	6019      	str	r1, [r3, #0]
 800584a:	e002      	b.n	8005852 <_printf_i+0x1c6>
 800584c:	0668      	lsls	r0, r5, #25
 800584e:	d5fb      	bpl.n	8005848 <_printf_i+0x1bc>
 8005850:	8019      	strh	r1, [r3, #0]
 8005852:	2300      	movs	r3, #0
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	4616      	mov	r6, r2
 8005858:	e7bc      	b.n	80057d4 <_printf_i+0x148>
 800585a:	6833      	ldr	r3, [r6, #0]
 800585c:	1d1a      	adds	r2, r3, #4
 800585e:	6032      	str	r2, [r6, #0]
 8005860:	681e      	ldr	r6, [r3, #0]
 8005862:	6862      	ldr	r2, [r4, #4]
 8005864:	2100      	movs	r1, #0
 8005866:	4630      	mov	r0, r6
 8005868:	f7fa fcba 	bl	80001e0 <memchr>
 800586c:	b108      	cbz	r0, 8005872 <_printf_i+0x1e6>
 800586e:	1b80      	subs	r0, r0, r6
 8005870:	6060      	str	r0, [r4, #4]
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	2300      	movs	r3, #0
 8005878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800587c:	e7aa      	b.n	80057d4 <_printf_i+0x148>
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	4632      	mov	r2, r6
 8005882:	4649      	mov	r1, r9
 8005884:	4640      	mov	r0, r8
 8005886:	47d0      	blx	sl
 8005888:	3001      	adds	r0, #1
 800588a:	d0ad      	beq.n	80057e8 <_printf_i+0x15c>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	079b      	lsls	r3, r3, #30
 8005890:	d413      	bmi.n	80058ba <_printf_i+0x22e>
 8005892:	68e0      	ldr	r0, [r4, #12]
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	4298      	cmp	r0, r3
 8005898:	bfb8      	it	lt
 800589a:	4618      	movlt	r0, r3
 800589c:	e7a6      	b.n	80057ec <_printf_i+0x160>
 800589e:	2301      	movs	r3, #1
 80058a0:	4632      	mov	r2, r6
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	47d0      	blx	sl
 80058a8:	3001      	adds	r0, #1
 80058aa:	d09d      	beq.n	80057e8 <_printf_i+0x15c>
 80058ac:	3501      	adds	r5, #1
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	9903      	ldr	r1, [sp, #12]
 80058b2:	1a5b      	subs	r3, r3, r1
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	dcf2      	bgt.n	800589e <_printf_i+0x212>
 80058b8:	e7eb      	b.n	8005892 <_printf_i+0x206>
 80058ba:	2500      	movs	r5, #0
 80058bc:	f104 0619 	add.w	r6, r4, #25
 80058c0:	e7f5      	b.n	80058ae <_printf_i+0x222>
 80058c2:	bf00      	nop
 80058c4:	08005a59 	.word	0x08005a59
 80058c8:	08005a6a 	.word	0x08005a6a

080058cc <memmove>:
 80058cc:	4288      	cmp	r0, r1
 80058ce:	b510      	push	{r4, lr}
 80058d0:	eb01 0402 	add.w	r4, r1, r2
 80058d4:	d902      	bls.n	80058dc <memmove+0x10>
 80058d6:	4284      	cmp	r4, r0
 80058d8:	4623      	mov	r3, r4
 80058da:	d807      	bhi.n	80058ec <memmove+0x20>
 80058dc:	1e43      	subs	r3, r0, #1
 80058de:	42a1      	cmp	r1, r4
 80058e0:	d008      	beq.n	80058f4 <memmove+0x28>
 80058e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058ea:	e7f8      	b.n	80058de <memmove+0x12>
 80058ec:	4402      	add	r2, r0
 80058ee:	4601      	mov	r1, r0
 80058f0:	428a      	cmp	r2, r1
 80058f2:	d100      	bne.n	80058f6 <memmove+0x2a>
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058fe:	e7f7      	b.n	80058f0 <memmove+0x24>

08005900 <_sbrk_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d06      	ldr	r5, [pc, #24]	@ (800591c <_sbrk_r+0x1c>)
 8005904:	2300      	movs	r3, #0
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	602b      	str	r3, [r5, #0]
 800590c:	f7fb fd22 	bl	8001354 <_sbrk>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d102      	bne.n	800591a <_sbrk_r+0x1a>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	b103      	cbz	r3, 800591a <_sbrk_r+0x1a>
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	200002f4 	.word	0x200002f4

08005920 <memcpy>:
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005928:	d100      	bne.n	800592c <memcpy+0xc>
 800592a:	4770      	bx	lr
 800592c:	b510      	push	{r4, lr}
 800592e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005936:	4291      	cmp	r1, r2
 8005938:	d1f9      	bne.n	800592e <memcpy+0xe>
 800593a:	bd10      	pop	{r4, pc}

0800593c <_realloc_r>:
 800593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005940:	4680      	mov	r8, r0
 8005942:	4615      	mov	r5, r2
 8005944:	460c      	mov	r4, r1
 8005946:	b921      	cbnz	r1, 8005952 <_realloc_r+0x16>
 8005948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800594c:	4611      	mov	r1, r2
 800594e:	f7ff bc4b 	b.w	80051e8 <_malloc_r>
 8005952:	b92a      	cbnz	r2, 8005960 <_realloc_r+0x24>
 8005954:	f7ff fbdc 	bl	8005110 <_free_r>
 8005958:	2400      	movs	r4, #0
 800595a:	4620      	mov	r0, r4
 800595c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005960:	f000 f81a 	bl	8005998 <_malloc_usable_size_r>
 8005964:	4285      	cmp	r5, r0
 8005966:	4606      	mov	r6, r0
 8005968:	d802      	bhi.n	8005970 <_realloc_r+0x34>
 800596a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800596e:	d8f4      	bhi.n	800595a <_realloc_r+0x1e>
 8005970:	4629      	mov	r1, r5
 8005972:	4640      	mov	r0, r8
 8005974:	f7ff fc38 	bl	80051e8 <_malloc_r>
 8005978:	4607      	mov	r7, r0
 800597a:	2800      	cmp	r0, #0
 800597c:	d0ec      	beq.n	8005958 <_realloc_r+0x1c>
 800597e:	42b5      	cmp	r5, r6
 8005980:	462a      	mov	r2, r5
 8005982:	4621      	mov	r1, r4
 8005984:	bf28      	it	cs
 8005986:	4632      	movcs	r2, r6
 8005988:	f7ff ffca 	bl	8005920 <memcpy>
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f7ff fbbe 	bl	8005110 <_free_r>
 8005994:	463c      	mov	r4, r7
 8005996:	e7e0      	b.n	800595a <_realloc_r+0x1e>

08005998 <_malloc_usable_size_r>:
 8005998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800599c:	1f18      	subs	r0, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfbc      	itt	lt
 80059a2:	580b      	ldrlt	r3, [r1, r0]
 80059a4:	18c0      	addlt	r0, r0, r3
 80059a6:	4770      	bx	lr

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
